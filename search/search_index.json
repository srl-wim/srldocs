{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SRL Docs # On this website we host some information on various aspects of SRL Getting started Configuring SRL Agents Python","title":"Home"},{"location":"#welcome-to-srl-docs","text":"On this website we host some information on various aspects of SRL Getting started Configuring SRL Agents Python","title":"Welcome to SRL Docs"},{"location":"configuration/introduction/","text":"Configuring SRL Introduction # Introduction to configuring SR-Linux","title":"Configuring SRL Introduction"},{"location":"configuration/introduction/#configuring-srl-introduction","text":"Introduction to configuring SR-Linux","title":"Configuring SRL Introduction"},{"location":"configuration/interfaces/bridged/","text":"","title":"Bridged"},{"location":"configuration/interfaces/lag/","text":"","title":"Lag"},{"location":"configuration/interfaces/routed/","text":"","title":"Routed"},{"location":"configuration/interfaces/vlan/","text":"","title":"Vlan"},{"location":"configuration/network-Instances/irb/","text":"MAC-VRF with IRB # In order to optimize the use of ip interfaces and subnets SRL support the concept of a MAC-VRF/IRB, which essentially is a bridged domain connected to an IP router interface. MAC-VRF/IRB allows to optimize the connectivity to client (e.g. server). With MAC-VRF/IRB we allow to aggregate all client in a bridged domain and hence the need for a dedicated IP interface is avoided. We will illustrate this with an example. In this example we have a SRL switch/router (leaf1) that connects 2 client through a MAC-VRF/IRB. We use 2 linux clients in this example, client 1 connected to port ethernet-\u2155 on vlan 10 and client 2 connected to port ethernet-\u2159 on vlan 20. We use the container environment for this setup. Configuring MAC-VRF instance and sub-interfaces using IRB # Configure VLAN interfaces # on SRL leaf1 interface ethernet-\u2155 admin-state enable vlan-tagging true subinterface 1 { type bridged admin-state enable vlan { encap { single-tagged { vlan-id 10 } } } } the important parameters are: - vlan-tagging: true ; allows for VLAN enabled interfaces - subinterface type: bridged; Bridged sub-interfaces can be associated to MAC-VRF instances, that allow MAC learning and layer-2 forwarding. - vlan-id: 10 is used on this interface to client1 On SRL leaf1 interface ethernet-\u2159 we have a similar configuration, but we use vlan 20 instead of vlan 10, to show that SRL support local VLAN significance. admin-state enable vlan-tagging true subinterface 1 { type bridged admin-state enable vlan { encap { single-tagged { vlan-id 20 } } } } Configure IRB interface # Now that we have the vlan interfaces configured, we can create an IRB interface. The IRB interface is like a loopback interface. hence you dont see an association with the physical ethernet interface / interface irb1 IRB interface configuraton admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.168.10.1/24 { } } ipv6 { address 3000:10::1/64 { } } } The IRB interface is of type routed which is the default in the system and hence you don't need to explicitly configure it. Also you create your IPv4 and IPv6 interface IP addresses, which will be the gateway IP(s) for the linux clients that are connected tot he IRB instance Configure MAC-VRF # The next step is creating the MAC-VRF network instance and associate the bridged and IRB interfaces to it. / network-instance mac-vrf10 Associate interfaces type mac-vrf admin-state enable interface ethernet-1/5.1 { } interface ethernet-1/6.1 { } interface irb1.1 { } Attach IRB interface to the default network-instance # Associate the same IRB interface to the network-instance default in order to attach it to the router context. / network-instance default Associate the IRB interface on top of the other interfaces which connected the leaf to the spine layer e.g. type ip-vrf admin-state enable description \"GRT / Default VRF\" ip-forwarding { receive-ipv4-check true receive-ipv6-check true } interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface ethernet-1/3.1 { } interface ethernet-1/4.1 { } interface irb1.1 { } interface lo0.1 { } Now the SRL switch/router is ready to handle the clients so lets connect and configure the clients Configuring Clients # We use a docker container image which was setup through a container image Client1 # We first spin up the container image. docker run -d --privileged --name client1 --network srlinux-mgmt --hostname client1 henderiw client-alpine:1.0.0 After we connect it to the SRL container image using a veth pair. Once this is done we can configure the eth1 interface which is used to connect to the SRL switch/router. ethtool --offload eth1 rx off tx off ip link add link eth1 name eth1.10 type vlan id 10 ip link set dev eth1.10 up sysctl -w net.ipv6.conf.eth1.10.disable_ipv6=0 ip addr add 192.168.10.10/24 dev eth1.10 ip -6 addr add 3000:10::10/64 dev eth1.10 Lets see if this configuration got applied client1:~# ifconfig eth1.10 eth1.10 Link encap:Ethernet HWaddr DE:13:FA:CF:FF:58 inet addr:192.168.10.10 Bcast:0.0.0.0 Mask:255.255.255.0 inet6 addr: fe80::dc13:faff:fecf:ff58/64 Scope:Link inet6 addr: 3000:10::10/64 Scope:Global UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:24 errors:0 dropped:0 overruns:0 frame:0 TX packets:24 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1646 (1.6 KiB) TX bytes:1928 (1.8 KiB) Client2 # We do the same on client 2. docker run -d --privileged --name client2 --network srlinux-mgmt --hostname client2 henderiw client-alpine:1.0.0 After we connect it to the SRL container image using a veth pair. Once this is done we can configure the eth1 interface which is used to connect to the SRL switch/router. ethtool --offload eth1 rx off tx off ip link add link eth1 name eth1.20 type vlan id 20 ip link set dev eth1.20 up sysctl -w net.ipv6.conf.eth1.20.disable_ipv6=0 ip addr add 192.168.10.20/24 dev eth1.20 ip -6 addr add 3000:10::20/64 dev eth1.20 Lets see if this configuration got applied client2:~# ifconfig eth1.20 eth1.20 Link encap:Ethernet HWaddr 32:64:9C:98:9E:FD inet addr:192.168.10.20 Bcast:0.0.0.0 Mask:255.255.255.0 inet6 addr: fe80::3064:9cff:fe98:9efd/64 Scope:Link inet6 addr: 3000:10::20/64 Scope:Global UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:9 errors:0 dropped:0 overruns:0 frame:0 TX packets:20 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:540 (540.0 B) TX bytes:1592 (1.5 KiB) Lets verfy the connectivity # From CLient 1 # ping SRL routed gateway client1:~# ping6 3000:10::1 PING 3000:10::1 (3000:10::1): 56 data bytes 64 bytes from 3000:10::1: seq=0 ttl=64 time=3.338 ms 64 bytes from 3000:10::1: seq=1 ttl=64 time=1.423 ms Ping CLient2 client1:~# ping6 3000:10::20 PING 3000:10::20 (3000:10::20): 56 data bytes 64 bytes from 3000:10::20: seq=0 ttl=64 time=0.312 ms 64 bytes from 3000:10::20: seq=1 ttl=64 time=0.342 ms 64 bytes from 3000:10::20: seq=2 ttl=64 time=0.354 ms On SRL # Show MAC table A:ant 1 -dc-fab-f 1 p 1 -leaf 1 # show / network-instance mac-vrf 10 bridge-table mac-table all | as json { \"Network\" : [ { \"Name\" : \"mac-vrf10\" , \"Mac table\" : [ { \"address\" : \"00:01:01:FF:00:41\" , \"Destination\" : \"irb-interface\" , \"Dest Index\" : 0 , \"Type\" : \"irb-interface\" , \"Active\" : true , \"Aging\" : \"N/A\" , \"Last Update\" : \"2020-08-05T04:33:51.000Z\" }, { \"address\" : \"32:64:9C:98:9E:FD\" , \"Destination\" : \"ethernet-1/6.1\" , \"Dest Index\" : 8 , \"Type\" : \"learnt\" , \"Active\" : true , \"Aging\" : \"255\" , \"Last Update\" : \"2020-08-05T05:29:43.000Z\" }, { \"address\" : \"DE:13:FA:CF:FF:58\" , \"Destination\" : \"ethernet-1/5.1\" , \"Dest Index\" : 7 , \"Type\" : \"learnt\" , \"Active\" : true , \"Aging\" : \"255\" , \"Last Update\" : \"2020-08-05T05:29:37.000Z\" } ] } ], \"Total Statistics\" : [ { \"Counter name\" : \"Total Irb Macs\" , \"Total\" : 1 , \"Active\" : 1 }, { \"Counter name\" : \"Total Static Macs\" , \"Total\" : 0 , \"Active\" : 0 }, { \"Counter name\" : \"Total Duplicate Macs\" , \"Total\" : 0 , \"Active\" : 0 }, { \"Counter name\" : \"Total Learnt Macs\" , \"Total\" : 2 , \"Active\" : 2 }, { \"Counter name\" : \"Total Macs\" , \"Total\" : 3 , \"Active\" : 3 } ] }","title":"MAC-VRF with IRB"},{"location":"configuration/network-Instances/irb/#mac-vrf-with-irb","text":"In order to optimize the use of ip interfaces and subnets SRL support the concept of a MAC-VRF/IRB, which essentially is a bridged domain connected to an IP router interface. MAC-VRF/IRB allows to optimize the connectivity to client (e.g. server). With MAC-VRF/IRB we allow to aggregate all client in a bridged domain and hence the need for a dedicated IP interface is avoided. We will illustrate this with an example. In this example we have a SRL switch/router (leaf1) that connects 2 client through a MAC-VRF/IRB. We use 2 linux clients in this example, client 1 connected to port ethernet-\u2155 on vlan 10 and client 2 connected to port ethernet-\u2159 on vlan 20. We use the container environment for this setup.","title":"MAC-VRF with IRB"},{"location":"configuration/network-Instances/irb/#configuring-mac-vrf-instance-and-sub-interfaces-using-irb","text":"","title":"Configuring MAC-VRF instance and sub-interfaces using IRB"},{"location":"configuration/network-Instances/irb/#configure-vlan-interfaces","text":"on SRL leaf1 interface ethernet-\u2155 admin-state enable vlan-tagging true subinterface 1 { type bridged admin-state enable vlan { encap { single-tagged { vlan-id 10 } } } } the important parameters are: - vlan-tagging: true ; allows for VLAN enabled interfaces - subinterface type: bridged; Bridged sub-interfaces can be associated to MAC-VRF instances, that allow MAC learning and layer-2 forwarding. - vlan-id: 10 is used on this interface to client1 On SRL leaf1 interface ethernet-\u2159 we have a similar configuration, but we use vlan 20 instead of vlan 10, to show that SRL support local VLAN significance. admin-state enable vlan-tagging true subinterface 1 { type bridged admin-state enable vlan { encap { single-tagged { vlan-id 20 } } } }","title":"Configure VLAN interfaces"},{"location":"configuration/network-Instances/irb/#configure-irb-interface","text":"Now that we have the vlan interfaces configured, we can create an IRB interface. The IRB interface is like a loopback interface. hence you dont see an association with the physical ethernet interface / interface irb1 IRB interface configuraton admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.168.10.1/24 { } } ipv6 { address 3000:10::1/64 { } } } The IRB interface is of type routed which is the default in the system and hence you don't need to explicitly configure it. Also you create your IPv4 and IPv6 interface IP addresses, which will be the gateway IP(s) for the linux clients that are connected tot he IRB instance","title":"Configure IRB interface"},{"location":"configuration/network-Instances/irb/#configure-mac-vrf","text":"The next step is creating the MAC-VRF network instance and associate the bridged and IRB interfaces to it. / network-instance mac-vrf10 Associate interfaces type mac-vrf admin-state enable interface ethernet-1/5.1 { } interface ethernet-1/6.1 { } interface irb1.1 { }","title":"Configure MAC-VRF"},{"location":"configuration/network-Instances/irb/#attach-irb-interface-to-the-default-network-instance","text":"Associate the same IRB interface to the network-instance default in order to attach it to the router context. / network-instance default Associate the IRB interface on top of the other interfaces which connected the leaf to the spine layer e.g. type ip-vrf admin-state enable description \"GRT / Default VRF\" ip-forwarding { receive-ipv4-check true receive-ipv6-check true } interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface ethernet-1/3.1 { } interface ethernet-1/4.1 { } interface irb1.1 { } interface lo0.1 { } Now the SRL switch/router is ready to handle the clients so lets connect and configure the clients","title":"Attach IRB interface to the default network-instance"},{"location":"configuration/network-Instances/irb/#configuring-clients","text":"We use a docker container image which was setup through a container image","title":"Configuring Clients"},{"location":"configuration/network-Instances/irb/#client1","text":"We first spin up the container image. docker run -d --privileged --name client1 --network srlinux-mgmt --hostname client1 henderiw client-alpine:1.0.0 After we connect it to the SRL container image using a veth pair. Once this is done we can configure the eth1 interface which is used to connect to the SRL switch/router. ethtool --offload eth1 rx off tx off ip link add link eth1 name eth1.10 type vlan id 10 ip link set dev eth1.10 up sysctl -w net.ipv6.conf.eth1.10.disable_ipv6=0 ip addr add 192.168.10.10/24 dev eth1.10 ip -6 addr add 3000:10::10/64 dev eth1.10 Lets see if this configuration got applied client1:~# ifconfig eth1.10 eth1.10 Link encap:Ethernet HWaddr DE:13:FA:CF:FF:58 inet addr:192.168.10.10 Bcast:0.0.0.0 Mask:255.255.255.0 inet6 addr: fe80::dc13:faff:fecf:ff58/64 Scope:Link inet6 addr: 3000:10::10/64 Scope:Global UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:24 errors:0 dropped:0 overruns:0 frame:0 TX packets:24 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1646 (1.6 KiB) TX bytes:1928 (1.8 KiB)","title":"Client1"},{"location":"configuration/network-Instances/irb/#client2","text":"We do the same on client 2. docker run -d --privileged --name client2 --network srlinux-mgmt --hostname client2 henderiw client-alpine:1.0.0 After we connect it to the SRL container image using a veth pair. Once this is done we can configure the eth1 interface which is used to connect to the SRL switch/router. ethtool --offload eth1 rx off tx off ip link add link eth1 name eth1.20 type vlan id 20 ip link set dev eth1.20 up sysctl -w net.ipv6.conf.eth1.20.disable_ipv6=0 ip addr add 192.168.10.20/24 dev eth1.20 ip -6 addr add 3000:10::20/64 dev eth1.20 Lets see if this configuration got applied client2:~# ifconfig eth1.20 eth1.20 Link encap:Ethernet HWaddr 32:64:9C:98:9E:FD inet addr:192.168.10.20 Bcast:0.0.0.0 Mask:255.255.255.0 inet6 addr: fe80::3064:9cff:fe98:9efd/64 Scope:Link inet6 addr: 3000:10::20/64 Scope:Global UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:9 errors:0 dropped:0 overruns:0 frame:0 TX packets:20 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:540 (540.0 B) TX bytes:1592 (1.5 KiB)","title":"Client2"},{"location":"configuration/network-Instances/irb/#lets-verfy-the-connectivity","text":"","title":"Lets verfy the connectivity"},{"location":"configuration/network-Instances/irb/#from-client-1","text":"ping SRL routed gateway client1:~# ping6 3000:10::1 PING 3000:10::1 (3000:10::1): 56 data bytes 64 bytes from 3000:10::1: seq=0 ttl=64 time=3.338 ms 64 bytes from 3000:10::1: seq=1 ttl=64 time=1.423 ms Ping CLient2 client1:~# ping6 3000:10::20 PING 3000:10::20 (3000:10::20): 56 data bytes 64 bytes from 3000:10::20: seq=0 ttl=64 time=0.312 ms 64 bytes from 3000:10::20: seq=1 ttl=64 time=0.342 ms 64 bytes from 3000:10::20: seq=2 ttl=64 time=0.354 ms","title":"From CLient 1"},{"location":"configuration/network-Instances/irb/#on-srl","text":"Show MAC table A:ant 1 -dc-fab-f 1 p 1 -leaf 1 # show / network-instance mac-vrf 10 bridge-table mac-table all | as json { \"Network\" : [ { \"Name\" : \"mac-vrf10\" , \"Mac table\" : [ { \"address\" : \"00:01:01:FF:00:41\" , \"Destination\" : \"irb-interface\" , \"Dest Index\" : 0 , \"Type\" : \"irb-interface\" , \"Active\" : true , \"Aging\" : \"N/A\" , \"Last Update\" : \"2020-08-05T04:33:51.000Z\" }, { \"address\" : \"32:64:9C:98:9E:FD\" , \"Destination\" : \"ethernet-1/6.1\" , \"Dest Index\" : 8 , \"Type\" : \"learnt\" , \"Active\" : true , \"Aging\" : \"255\" , \"Last Update\" : \"2020-08-05T05:29:43.000Z\" }, { \"address\" : \"DE:13:FA:CF:FF:58\" , \"Destination\" : \"ethernet-1/5.1\" , \"Dest Index\" : 7 , \"Type\" : \"learnt\" , \"Active\" : true , \"Aging\" : \"255\" , \"Last Update\" : \"2020-08-05T05:29:37.000Z\" } ] } ], \"Total Statistics\" : [ { \"Counter name\" : \"Total Irb Macs\" , \"Total\" : 1 , \"Active\" : 1 }, { \"Counter name\" : \"Total Static Macs\" , \"Total\" : 0 , \"Active\" : 0 }, { \"Counter name\" : \"Total Duplicate Macs\" , \"Total\" : 0 , \"Active\" : 0 }, { \"Counter name\" : \"Total Learnt Macs\" , \"Total\" : 2 , \"Active\" : 2 }, { \"Counter name\" : \"Total Macs\" , \"Total\" : 3 , \"Active\" : 3 } ] }","title":"On SRL"},{"location":"configuration/network-Instances/vrf/","text":"","title":"Vrf"},{"location":"configuration/protocols/BGP-SRL-cEOS/","text":"Configuring eBGP between Nokia SRL and Arista cEOS # This note describes how to setup isis between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ We configure both IPv4 and IPv6 to show dual stack BGP environment Configuring interfaces # First we have to configure the interfaces on the various devices WAN1 - SRL router # Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } ipv6 { address 2000:192:1::1/64 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } ipv6 { address 2000:192:3::1/64 { } } } WAN2- SRL router # Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } ipv6 { address 2000:192:1::2/64 { } } } Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } ipv6 { address 2000:192:2::1/64 { } } } WAN3 - cEOS router # Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 Configure the interface on WAN3 to WAN2 SRL interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 Configuring the router instance # Before we can configure BGP we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing and ipv6 routing. WAN1 - SRL router # --{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN2- SRL router # --{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN3 - cEOS router # ip routing ! ipv6 unicast-routing ! Configuring BGP # After the interfaces are configured we will configure dual stack eBGP between the various routers. WAN1 - SRL router # On SRL we create a BGP protocol instance lab --{ candidate private private-root }--[ network-instance default protocols ]-- A:wan1# isis instance lab After we configure the isis parameters like: admin-state: enables the isis instance interface configuration for ethernet1-1.1, ethernet1-2/1 and lo1.1 IPv4-unicast IPv6-unicast net: The NET is 8-20 octets long and consists of 3 parts: Area ID \u2014 A variable length field between 1 and 13 bytes. This includes the Authority and Format Identifier (AFI) as the most significant byte and the area ID. System ID \u2014 A 6-byte system identification. This value is not configurable. The system ID is derived from the system or router ID. Selector ID \u2014 A 1-byte selector identification that must contain zeros when configuring a NET. This value is not configurable. The selector ID is always 00. There are many more features supported by SRL which can be read in the configuration guides A:wan1# instance lab --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan1# info admin-state enable net [ 49.0001.0001.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true } WAN2 - SRL router # A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan2# info admin-state enable net [ 49.0001.0002.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true } WAN3 - cEOS router # On cEOS the configuration is slightly different, First we enable the isis instance with the specific net/system id and disable hello-padding router isis lab no hello padding net 49.0001.0003.0000.0000.00 log-adjacency-changes ! address-family ipv4 unicast ! address-family ipv6 unicast ! After we map the interfaces to the isis instance interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 isis enable lab isis network point-to-point ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 isis enable lab isis network point-to-point ! Viewing ISIS state # Now that we configured OSPF on the various devices we can look at the operational state of the various devices ISIS adjacency # On SRL devices A:wan1# show / network-instance default protocols isis adjacency Network Instance: default Instance : lab +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0002.0000.0000 | L2 | ethernet-1/1.1 | 192.1.1.2 | fe80::201:1ff:f | up | 2020-08-30T16:3 | 22 | | | | | | eff:0 | | 4:10.100Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0003.0000.0000 | L1L2 | ethernet-1/2.1 | 192.1.3.2 | fe80::44f4:d4ff | up | 2020-08-30T16:3 | 22 | | | | | | :fec9:1af1 | | 4:20.500Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +===================+=================+================+============+==============+=======+=================+===================+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ Adjacency Count: 2 ================================================================================================================================== On cEOS device ISIS database # On SRL devices A:wan1# show / network-instance default protocols isis database ---------------------------------------------------------------------------------------------------------------------------------- Network Instance: default Instance : lab +--------------+----------------------+----------+----------+----------+------------+ | Level Number | Lsp Id | Sequence | Checksum | Lifetime | Attributes | +==============+======================+==========+==========+==========+============+ | 2 | 0001.0000.0000.00-00 | 0x1d | 0x6dab | 834 | L1 L2 | | 2 | 0002.0000.0000.00-00 | 0x4b | 0xd217 | 809 | L1 L2 | | 2 | 0003.0000.0000.00-00 | 0x13 | 0xa8e5 | 937 | L1 L2 | +--------------+----------------------+----------+----------+----------+------------+ LSP Count: 3 ---------------------------------------------------------------------------------------------------------------------------------- On cEOS device wan3(config-router-isis)#sh isis database IS-IS Instance: lab VRF: default IS-IS Level 1 Link State Database LSPID Seq Num Cksum Life IS Flags wan3.00-00 14 20104 466 L2 <> IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life IS Flags wan1.00-00 30 27564 985 L2 <> wan2.00-00 76 53272 907 L2 <> wan3.00-00 19 43237 444 L2 <> Routing table # on SRL devices A:wan1# show / network-instance default route-table all ---------------------------------------------------------------------------------------------------------------------------------- IPv4 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 1.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 1.1.1.2/32 | 0 | true | isis | 10 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.0/24 | 0 | true | local | 0 | 0 | 192.1.1.1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.1.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | | 192.1.2.0/24 | 0 | true | isis | 20 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.3.0/24 | 0 | true | local | 0 | 0 | 192.1.3.1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 192.1.3.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.3.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 9 IPv4 routes total 9 IPv4 prefixes with active routes 0 IPv4 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------- IPv6 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 2000:192:1::/64 | 0 | true | local | 0 | 0 | 2000:192:1::1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:1::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 2000:192:2::/64 | 0 | true | isis | 20 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:3::/64 | 0 | true | local | 0 | 0 | 2000:192:3::1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 2000:192:3::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::2/128 | 0 | true | isis | 10 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 7 IPv6 routes total 7 IPv6 prefixes with active routes 0 IPv6 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- on cEOS device wan3(config)#sh ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - BGP, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route Gateway of last resort is not set I L2 1.1.1.1/32 [115/10] via 192.1.3.1, Ethernet2 I L2 1.1.1.2/32 [115/10] via 192.1.2.1, Ethernet1 I L2 192.1.1.0/24 [115/20] via 192.1.2.1, Ethernet1 via 192.1.3.1, Ethernet2 C 192.1.2.0/24 is directly connected, Ethernet1 C 192.1.3.0/24 is directly connected, Ethernet2 wan3(config)#sh ipv6 route VRF: default Displaying 5 of 11 IPv6 routing table entries Codes: C - connected, S - static, K - kernel, O3 - OSPFv3, B - BGP, R - RIP, A B - BGP Aggregate, I L1 - IS-IS level 1, I L2 - IS-IS level 2, DH - DHCP, NG - Nexthop Group Static Route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route I L2 2000:192:1::/64 [115/20] via fe80::201:1ff:feff:1, Ethernet1 via fe80::201:ff:feff:1, Ethernet2 C 2000:192:2::/64 [0/1] via Ethernet1, directly connected C 2000:192:3::/64 [0/1] via Ethernet2, directly connected I L2 3000::1/128 [115/10] via fe80::201:ff:feff:1, Ethernet2 I L2 3000::2/128 [115/10] via fe80::201:1ff:feff:1, Ethernet1","title":"Configuring eBGP between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/BGP-SRL-cEOS/#configuring-ebgp-between-nokia-srl-and-arista-ceos","text":"This note describes how to setup isis between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ We configure both IPv4 and IPv6 to show dual stack BGP environment","title":"Configuring eBGP between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/BGP-SRL-cEOS/#configuring-interfaces","text":"First we have to configure the interfaces on the various devices","title":"Configuring interfaces"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan1-srl-router","text":"Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } ipv6 { address 2000:192:1::1/64 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } ipv6 { address 2000:192:3::1/64 { } } }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan2-srl-router","text":"Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } ipv6 { address 2000:192:1::2/64 { } } } Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } ipv6 { address 2000:192:2::1/64 { } } }","title":"WAN2- SRL router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan3-ceos-router","text":"Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 Configure the interface on WAN3 to WAN2 SRL interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#configuring-the-router-instance","text":"Before we can configure BGP we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing and ipv6 routing.","title":"Configuring the router instance"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan1-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan2-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN2- SRL router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan3-ceos-router_1","text":"ip routing ! ipv6 unicast-routing !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#configuring-bgp","text":"After the interfaces are configured we will configure dual stack eBGP between the various routers.","title":"Configuring BGP"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan1-srl-router_2","text":"On SRL we create a BGP protocol instance lab --{ candidate private private-root }--[ network-instance default protocols ]-- A:wan1# isis instance lab After we configure the isis parameters like: admin-state: enables the isis instance interface configuration for ethernet1-1.1, ethernet1-2/1 and lo1.1 IPv4-unicast IPv6-unicast net: The NET is 8-20 octets long and consists of 3 parts: Area ID \u2014 A variable length field between 1 and 13 bytes. This includes the Authority and Format Identifier (AFI) as the most significant byte and the area ID. System ID \u2014 A 6-byte system identification. This value is not configurable. The system ID is derived from the system or router ID. Selector ID \u2014 A 1-byte selector identification that must contain zeros when configuring a NET. This value is not configurable. The selector ID is always 00. There are many more features supported by SRL which can be read in the configuration guides A:wan1# instance lab --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan1# info admin-state enable net [ 49.0001.0001.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan2-srl-router_2","text":"A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan2# info admin-state enable net [ 49.0001.0002.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true }","title":"WAN2 - SRL router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#wan3-ceos-router_2","text":"On cEOS the configuration is slightly different, First we enable the isis instance with the specific net/system id and disable hello-padding router isis lab no hello padding net 49.0001.0003.0000.0000.00 log-adjacency-changes ! address-family ipv4 unicast ! address-family ipv6 unicast ! After we map the interfaces to the isis instance interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 isis enable lab isis network point-to-point ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 isis enable lab isis network point-to-point !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/BGP-SRL-cEOS/#viewing-isis-state","text":"Now that we configured OSPF on the various devices we can look at the operational state of the various devices","title":"Viewing ISIS state"},{"location":"configuration/protocols/BGP-SRL-cEOS/#isis-adjacency","text":"On SRL devices A:wan1# show / network-instance default protocols isis adjacency Network Instance: default Instance : lab +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0002.0000.0000 | L2 | ethernet-1/1.1 | 192.1.1.2 | fe80::201:1ff:f | up | 2020-08-30T16:3 | 22 | | | | | | eff:0 | | 4:10.100Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0003.0000.0000 | L1L2 | ethernet-1/2.1 | 192.1.3.2 | fe80::44f4:d4ff | up | 2020-08-30T16:3 | 22 | | | | | | :fec9:1af1 | | 4:20.500Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +===================+=================+================+============+==============+=======+=================+===================+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ Adjacency Count: 2 ================================================================================================================================== On cEOS device","title":"ISIS adjacency"},{"location":"configuration/protocols/BGP-SRL-cEOS/#isis-database","text":"On SRL devices A:wan1# show / network-instance default protocols isis database ---------------------------------------------------------------------------------------------------------------------------------- Network Instance: default Instance : lab +--------------+----------------------+----------+----------+----------+------------+ | Level Number | Lsp Id | Sequence | Checksum | Lifetime | Attributes | +==============+======================+==========+==========+==========+============+ | 2 | 0001.0000.0000.00-00 | 0x1d | 0x6dab | 834 | L1 L2 | | 2 | 0002.0000.0000.00-00 | 0x4b | 0xd217 | 809 | L1 L2 | | 2 | 0003.0000.0000.00-00 | 0x13 | 0xa8e5 | 937 | L1 L2 | +--------------+----------------------+----------+----------+----------+------------+ LSP Count: 3 ---------------------------------------------------------------------------------------------------------------------------------- On cEOS device wan3(config-router-isis)#sh isis database IS-IS Instance: lab VRF: default IS-IS Level 1 Link State Database LSPID Seq Num Cksum Life IS Flags wan3.00-00 14 20104 466 L2 <> IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life IS Flags wan1.00-00 30 27564 985 L2 <> wan2.00-00 76 53272 907 L2 <> wan3.00-00 19 43237 444 L2 <>","title":"ISIS database"},{"location":"configuration/protocols/BGP-SRL-cEOS/#routing-table","text":"on SRL devices A:wan1# show / network-instance default route-table all ---------------------------------------------------------------------------------------------------------------------------------- IPv4 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 1.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 1.1.1.2/32 | 0 | true | isis | 10 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.0/24 | 0 | true | local | 0 | 0 | 192.1.1.1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.1.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | | 192.1.2.0/24 | 0 | true | isis | 20 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.3.0/24 | 0 | true | local | 0 | 0 | 192.1.3.1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 192.1.3.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.3.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 9 IPv4 routes total 9 IPv4 prefixes with active routes 0 IPv4 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------- IPv6 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 2000:192:1::/64 | 0 | true | local | 0 | 0 | 2000:192:1::1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:1::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 2000:192:2::/64 | 0 | true | isis | 20 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:3::/64 | 0 | true | local | 0 | 0 | 2000:192:3::1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 2000:192:3::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::2/128 | 0 | true | isis | 10 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 7 IPv6 routes total 7 IPv6 prefixes with active routes 0 IPv6 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- on cEOS device wan3(config)#sh ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - BGP, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route Gateway of last resort is not set I L2 1.1.1.1/32 [115/10] via 192.1.3.1, Ethernet2 I L2 1.1.1.2/32 [115/10] via 192.1.2.1, Ethernet1 I L2 192.1.1.0/24 [115/20] via 192.1.2.1, Ethernet1 via 192.1.3.1, Ethernet2 C 192.1.2.0/24 is directly connected, Ethernet1 C 192.1.3.0/24 is directly connected, Ethernet2 wan3(config)#sh ipv6 route VRF: default Displaying 5 of 11 IPv6 routing table entries Codes: C - connected, S - static, K - kernel, O3 - OSPFv3, B - BGP, R - RIP, A B - BGP Aggregate, I L1 - IS-IS level 1, I L2 - IS-IS level 2, DH - DHCP, NG - Nexthop Group Static Route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route I L2 2000:192:1::/64 [115/20] via fe80::201:1ff:feff:1, Ethernet1 via fe80::201:ff:feff:1, Ethernet2 C 2000:192:2::/64 [0/1] via Ethernet1, directly connected C 2000:192:3::/64 [0/1] via Ethernet2, directly connected I L2 3000::1/128 [115/10] via fe80::201:ff:feff:1, Ethernet2 I L2 3000::2/128 [115/10] via fe80::201:1ff:feff:1, Ethernet1","title":"Routing table"},{"location":"configuration/protocols/ISIS-SRL-cEOS/","text":"Configuring ISIS between Nokia SRL and Arista cEOS # This note describes how to setup isis between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ We configure both IPv4 and IPv6 to show both address families working through ISIS Configuring interfaces # First we have to configure the interfaces on the various devices WAN1 - SRL router # Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } ipv6 { address 2000:192:1::1/64 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } ipv6 { address 2000:192:3::1/64 { } } } WAN2- SRL router # Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } ipv6 { address 2000:192:1::2/64 { } } } Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } ipv6 { address 2000:192:2::1/64 { } } } WAN3 - cEOS router # Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 Configure the interface on WAN3 to WAN2 SRL interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 Configuring the router instance # Before we can configure ISIS we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing and ipv6 routing. WAN1 - SRL router # --{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN2- SRL router # --{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN3 - cEOS router # ip routing ! ipv6 unicast-routing ! Configuring ISIS # After the interfaces are configured we will configure an ISIS with level-L1-L2 capability between the various routers. WAN1 - SRL router # On SRL we create a ISIS protocol instance lab --{ candidate private private-root }--[ network-instance default protocols ]-- A:wan1# isis instance lab After we configure the isis parameters like: admin-state: enables the isis instance interface configuration for ethernet1-1.1, ethernet1-2/1 and lo1.1 IPv4-unicast IPv6-unicast net: The NET is 8-20 octets long and consists of 3 parts: Area ID \u2014 A variable length field between 1 and 13 bytes. This includes the Authority and Format Identifier (AFI) as the most significant byte and the area ID. System ID \u2014 A 6-byte system identification. This value is not configurable. The system ID is derived from the system or router ID. Selector ID \u2014 A 1-byte selector identification that must contain zeros when configuring a NET. This value is not configurable. The selector ID is always 00. There are many more features supported by SRL which can be read in the configuration guides A:wan1# instance lab --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan1# info admin-state enable net [ 49.0001.0001.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true } WAN2 - SRL router # A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan2# info admin-state enable net [ 49.0001.0002.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true } WAN3 - cEOS router # On cEOS the configuration is slightly different, First we enable the isis instance with the specific net/system id and disable hello-padding router isis lab no hello padding net 49.0001.0003.0000.0000.00 log-adjacency-changes ! address-family ipv4 unicast ! address-family ipv6 unicast ! After we map the interfaces to the isis instance interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 isis enable lab isis network point-to-point ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 isis enable lab isis network point-to-point ! Viewing BGP state # Now that we configured OSPF on the various devices we can look at the operational state of the various devices BGP neighbor # On SRL devices On cEOS device Routing table # on SRL devices on cEOS device Full cEOS config # wan3(config-router-bgp)#sh running-config ! Command: show running-config ! device: wan3 (cEOSLab, EOS-4.24.2.1F-18613460.42421F (engineering build)) ! transceiver qsfp default-mode 4x10G ! service routing protocols model ribd ! agent Bfd shutdown agent PowerManager shutdown agent LedPolicy shutdown agent Thermostat shutdown agent PowerFuse shutdown agent StandbyCpld shutdown agent LicenseManager shutdown ! hostname wan3 ! spanning-tree mode mstp ! no aaa root ! interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 ! ip routing ! ipv6 unicast-routing ! router bgp 300 neighbor 192.1.2.1 remote-as 200 neighbor 192.1.2.1 maximum-routes 12000 neighbor 192.1.3.1 remote-as 100 neighbor 192.1.3.1 maximum-routes 12000 ! end","title":"Configuring ISIS between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#configuring-isis-between-nokia-srl-and-arista-ceos","text":"This note describes how to setup isis between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ We configure both IPv4 and IPv6 to show both address families working through ISIS","title":"Configuring ISIS between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#configuring-interfaces","text":"First we have to configure the interfaces on the various devices","title":"Configuring interfaces"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan1-srl-router","text":"Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } ipv6 { address 2000:192:1::1/64 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } ipv6 { address 2000:192:3::1/64 { } } }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan2-srl-router","text":"Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } ipv6 { address 2000:192:1::2/64 { } } } Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } ipv6 { address 2000:192:2::1/64 { } } }","title":"WAN2- SRL router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan3-ceos-router","text":"Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 Configure the interface on WAN3 to WAN2 SRL interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#configuring-the-router-instance","text":"Before we can configure ISIS we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing and ipv6 routing.","title":"Configuring the router instance"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan1-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan2-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN2- SRL router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan3-ceos-router_1","text":"ip routing ! ipv6 unicast-routing !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#configuring-isis","text":"After the interfaces are configured we will configure an ISIS with level-L1-L2 capability between the various routers.","title":"Configuring ISIS"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan1-srl-router_2","text":"On SRL we create a ISIS protocol instance lab --{ candidate private private-root }--[ network-instance default protocols ]-- A:wan1# isis instance lab After we configure the isis parameters like: admin-state: enables the isis instance interface configuration for ethernet1-1.1, ethernet1-2/1 and lo1.1 IPv4-unicast IPv6-unicast net: The NET is 8-20 octets long and consists of 3 parts: Area ID \u2014 A variable length field between 1 and 13 bytes. This includes the Authority and Format Identifier (AFI) as the most significant byte and the area ID. System ID \u2014 A 6-byte system identification. This value is not configurable. The system ID is derived from the system or router ID. Selector ID \u2014 A 1-byte selector identification that must contain zeros when configuring a NET. This value is not configurable. The selector ID is always 00. There are many more features supported by SRL which can be read in the configuration guides A:wan1# instance lab --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan1# info admin-state enable net [ 49.0001.0001.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan2-srl-router_2","text":"A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols isis instance lab ]-- A:wan2# info admin-state enable net [ 49.0001.0002.0000.0000.00 ] ipv4-unicast { admin-state enable } ipv6-unicast { admin-state enable } interface ethernet-1/1.1 { admin-state enable circuit-type point-to-point } interface ethernet-1/2.1 { admin-state enable circuit-type point-to-point } interface lo1.1 { passive true }","title":"WAN2 - SRL router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#wan3-ceos-router_2","text":"On cEOS the configuration is slightly different, First we enable the isis instance with the specific net/system id and disable hello-padding router isis lab no hello padding net 49.0001.0003.0000.0000.00 log-adjacency-changes ! address-family ipv4 unicast ! address-family ipv6 unicast ! After we map the interfaces to the isis instance interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 isis enable lab isis network point-to-point ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 isis enable lab isis network point-to-point !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#viewing-bgp-state","text":"Now that we configured OSPF on the various devices we can look at the operational state of the various devices","title":"Viewing BGP state"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#bgp-neighbor","text":"On SRL devices On cEOS device","title":"BGP neighbor"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#routing-table","text":"on SRL devices on cEOS device","title":"Routing table"},{"location":"configuration/protocols/ISIS-SRL-cEOS/#full-ceos-config","text":"wan3(config-router-bgp)#sh running-config ! Command: show running-config ! device: wan3 (cEOSLab, EOS-4.24.2.1F-18613460.42421F (engineering build)) ! transceiver qsfp default-mode 4x10G ! service routing protocols model ribd ! agent Bfd shutdown agent PowerManager shutdown agent LedPolicy shutdown agent Thermostat shutdown agent PowerFuse shutdown agent StandbyCpld shutdown agent LicenseManager shutdown ! hostname wan3 ! spanning-tree mode mstp ! no aaa root ! interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 ! ip routing ! ipv6 unicast-routing ! router bgp 300 neighbor 192.1.2.1 remote-as 200 neighbor 192.1.2.1 maximum-routes 12000 neighbor 192.1.3.1 remote-as 100 neighbor 192.1.3.1 maximum-routes 12000 ! end","title":"Full cEOS config"},{"location":"configuration/protocols/OSPF-SRL-cEOS/","text":"Configuring OSPF between Nokia SRL and Arista cEOS # This note describes how to setup ospf between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ Configuring interfaces # First we have to configure the interfaces on the various devices WAN1 - SRL router # Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } } WAN2- SRL router # Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } } --{ running }--[ interface ethernet-1/1 ]-- Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } } WAN3 - cEOS router # Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ! Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ! Configuring the router instance # Before we can configure OSPF we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing. WAN1 - SRL router # --{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN2- SRL router # --{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN3 - cEOS router # ip routing Configuring OSPF # After the interfaces are configured we will configure an OSPF Backbone area 0.0.0.0 between the various routers. WAN1 - SRL router # On SRL we create a OSPF protocol instance --{ running }--[ network-instance default ]-- A:wan1# protocols ospf instance lab After we configure the ospf parameters like: admin-state: enables the ospf instance version: allows to select the OSPF version OSPFv2 or OSPFv3 router-id: typically setup using the system loopback of the router, which is the same ip address as configured on lo0.1 area: here we use area 0.0.0.0 with its interfaces There are many more features supported by SRL which can be read in the configuration guides --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan1# info admin-state enable version OSPF_V2 router-id 10.1.1.1 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } } WAN2 - SRL router # A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan2# info admin-state enable version OSPF_V2 router-id 10.1.1.2 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } } WAN3 - cEOS router # On cEOS the configuration is slightly different, First we enable the ospf instance router ospf 1 router-id 10.1.1.3 max-lsa 12000 ! After we map the interfaces to the backbone area interface Ethernet1 no switchport ip address 192.1.2.2/24 ip ospf network point-to-point ip ospf area 0.0.0.0 ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ip ospf network point-to-point ip ospf area 0.0.0.0 ! Viewing OSPF state # Now that we configured OSPF on the various devices we can look at the operational state of the various devices OSPF neighbors # On SRL devices --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan1# show ospf lab neighbor =================================================================================================================================== Net-Inst default OSPFv2 Instance lab Neighbors =================================================================================================================================== +--------------------------------------------------------------------+ | Interface-Name Rtr Id State Pri RetxQ Time Before Dead | +====================================================================+ | ethernet-1/1.1 10.1.1.2 FULL 1 0 39 | | ethernet-1/2.1 10.1.1.3 FULL 0 0 36 | +--------------------------------------------------------------------+ ----------------------------------------------------------------------------------------------------------------------------------- No. of Neighbors: 2 =================================================================================================================================== On cEOS device wan3(config-if-Et1)#sh ip ospf 1 neighbor Neighbor ID Instance VRF Pri State Dead Time Address Interface % Internal error % To see the details of this error, run the command 'show error 6' OSPF database # On SRL command not yet available On cEOS wan3(config-if-Et1)#sh ip ospf 1 database OSPF Router with ID(10.1.1.3) (Instance ID 1) (VRF default) Router Link States (Area 0.0.0.0) Link ID ADV Router Age Seq# Checksum Link count 255.255.255.255 255.255.255.255 3107 0x8000000d 0x6e67 5 10.1.1.2 10.1.1.2 805 0x80000014 0x3d75 5 10.1.1.1 10.1.1.1 1087 0x80000014 0xf1c1 5 Routing table # on SRL A:wan1# show / network-instance default route-table all ----------------------------------------------------------------------------------------------------------------------------------- IPv4 Unicast route table of network instance default ----------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+--------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+================================+==============+ | 1.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 1.1.1.2/32 | 0 | true | ospfv2 | 1 | 10 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.0/24 | 0 | true | local | 0 | 0 | 192.1.1.1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.1.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | | 192.1.2.0/24 | 0 | true | ospfv2 | 2 | 10 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.3.0/24 | 0 | true | local | 0 | 0 | 192.1.3.1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 192.1.3.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.3.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | +-----------------------+------+-----------+----------------+--------+------+--------------------------------+--------------+ ----------------------------------------------------------------------------------------------------------------------------------- 9 IPv4 routes total 9 IPv4 prefixes with active routes 0 IPv4 prefixes with active ECMP routes ------------------------------------------------------------------------------------------------------ on cEOS wan3(config-if-Et1)#sh ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - BGP, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route Gateway of last resort is not set O 1.1.1.1/32 [110/10] via 192.1.3.1, Ethernet2 O 1.1.1.2/32 [110/10] via 192.1.2.1, Ethernet1 O 192.1.1.0/24 [110/11] via 192.1.2.1, Ethernet1 via 192.1.3.1, Ethernet2 C 192.1.2.0/24 is directly connected, Ethernet1 C 192.1.3.0/24 is directly connected, Ethernet2","title":"Configuring OSPF between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#configuring-ospf-between-nokia-srl-and-arista-ceos","text":"This note describes how to setup ospf between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+","title":"Configuring OSPF between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#configuring-interfaces","text":"First we have to configure the interfaces on the various devices","title":"Configuring interfaces"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan1-srl-router","text":"Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan2-srl-router","text":"Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } } --{ running }--[ interface ethernet-1/1 ]-- Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } }","title":"WAN2- SRL router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan3-ceos-router","text":"Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ! Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#configuring-the-router-instance","text":"Before we can configure OSPF we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing.","title":"Configuring the router instance"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan1-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan2-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN2- SRL router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan3-ceos-router_1","text":"ip routing","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#configuring-ospf","text":"After the interfaces are configured we will configure an OSPF Backbone area 0.0.0.0 between the various routers.","title":"Configuring OSPF"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan1-srl-router_2","text":"On SRL we create a OSPF protocol instance --{ running }--[ network-instance default ]-- A:wan1# protocols ospf instance lab After we configure the ospf parameters like: admin-state: enables the ospf instance version: allows to select the OSPF version OSPFv2 or OSPFv3 router-id: typically setup using the system loopback of the router, which is the same ip address as configured on lo0.1 area: here we use area 0.0.0.0 with its interfaces There are many more features supported by SRL which can be read in the configuration guides --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan1# info admin-state enable version OSPF_V2 router-id 10.1.1.1 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan2-srl-router_2","text":"A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan2# info admin-state enable version OSPF_V2 router-id 10.1.1.2 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } }","title":"WAN2 - SRL router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#wan3-ceos-router_2","text":"On cEOS the configuration is slightly different, First we enable the ospf instance router ospf 1 router-id 10.1.1.3 max-lsa 12000 ! After we map the interfaces to the backbone area interface Ethernet1 no switchport ip address 192.1.2.2/24 ip ospf network point-to-point ip ospf area 0.0.0.0 ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ip ospf network point-to-point ip ospf area 0.0.0.0 !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#viewing-ospf-state","text":"Now that we configured OSPF on the various devices we can look at the operational state of the various devices","title":"Viewing OSPF state"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#ospf-neighbors","text":"On SRL devices --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan1# show ospf lab neighbor =================================================================================================================================== Net-Inst default OSPFv2 Instance lab Neighbors =================================================================================================================================== +--------------------------------------------------------------------+ | Interface-Name Rtr Id State Pri RetxQ Time Before Dead | +====================================================================+ | ethernet-1/1.1 10.1.1.2 FULL 1 0 39 | | ethernet-1/2.1 10.1.1.3 FULL 0 0 36 | +--------------------------------------------------------------------+ ----------------------------------------------------------------------------------------------------------------------------------- No. of Neighbors: 2 =================================================================================================================================== On cEOS device wan3(config-if-Et1)#sh ip ospf 1 neighbor Neighbor ID Instance VRF Pri State Dead Time Address Interface % Internal error % To see the details of this error, run the command 'show error 6'","title":"OSPF neighbors"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#ospf-database","text":"On SRL command not yet available On cEOS wan3(config-if-Et1)#sh ip ospf 1 database OSPF Router with ID(10.1.1.3) (Instance ID 1) (VRF default) Router Link States (Area 0.0.0.0) Link ID ADV Router Age Seq# Checksum Link count 255.255.255.255 255.255.255.255 3107 0x8000000d 0x6e67 5 10.1.1.2 10.1.1.2 805 0x80000014 0x3d75 5 10.1.1.1 10.1.1.1 1087 0x80000014 0xf1c1 5","title":"OSPF database"},{"location":"configuration/protocols/OSPF-SRL-cEOS/#routing-table","text":"on SRL A:wan1# show / network-instance default route-table all ----------------------------------------------------------------------------------------------------------------------------------- IPv4 Unicast route table of network instance default ----------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+--------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+================================+==============+ | 1.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 1.1.1.2/32 | 0 | true | ospfv2 | 1 | 10 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.0/24 | 0 | true | local | 0 | 0 | 192.1.1.1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.1.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | | 192.1.2.0/24 | 0 | true | ospfv2 | 2 | 10 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.3.0/24 | 0 | true | local | 0 | 0 | 192.1.3.1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 192.1.3.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.3.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | +-----------------------+------+-----------+----------------+--------+------+--------------------------------+--------------+ ----------------------------------------------------------------------------------------------------------------------------------- 9 IPv4 routes total 9 IPv4 prefixes with active routes 0 IPv4 prefixes with active ECMP routes ------------------------------------------------------------------------------------------------------ on cEOS wan3(config-if-Et1)#sh ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - BGP, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route Gateway of last resort is not set O 1.1.1.1/32 [110/10] via 192.1.3.1, Ethernet2 O 1.1.1.2/32 [110/10] via 192.1.2.1, Ethernet1 O 192.1.1.0/24 [110/11] via 192.1.2.1, Ethernet1 via 192.1.3.1, Ethernet2 C 192.1.2.0/24 is directly connected, Ethernet1 C 192.1.3.0/24 is directly connected, Ethernet2","title":"Routing table"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/","text":"Configuring OSPFv3 between Nokia SRL and Arista cEOS # This note describes how to setup ospfv3 between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ We configure both IPv4 and IPv6 to show both address families working through OSPFv3 Configuring interfaces # First we have to configure the interfaces on the various devices WAN1 - SRL router # Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } ipv6 { address 2000:192:1::1/64 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } ipv6 { address 2000:192:3::1/64 { } } } WAN2- SRL router # Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } ipv6 { address 2000:192:1::2/64 { } } } Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } ipv6 { address 2000:192:2::1/64 { } } } WAN3 - cEOS router # Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 Configure the interface on WAN3 to WAN2 SRL interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 Configuring the router instance # Before we can configure OSPFv3 we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing and ipv6 routing WAN1 - SRL router # --{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN2- SRL router # --{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { } WAN3 - cEOS router # ip routing ! ipv6 unicast-routing ! Configuring OSPFv3 # After the interfaces are configured we will configure an OSPFv3 Backbone area 0.0.0.0 between the various routers. WAN1 - SRL router # On SRL we create a OSPFv3 protocol instance --{ running }--[ network-instance default ]-- A:wan1# protocols ospf instance lab After we configure the ospf parameters like: admin-state: enables the ospf instance version: allows to select the OSPF version OSPFv2 or OSPFv3 address-family: IPV4_UNICAST or IPV6_UNICAST router-id: typically setup using the system loopback of the router, which is the same ip address as configured on lo0.1 area: here we use area 0.0.0.0 with its interfaces There are many more features supported by SRL which can be read in the configuration guides --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan1# info admin-state enable version OSPF_V3 address-family IPV4_UNICAST router-id 1.1.1.1 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } } WAN2 - SRL router # A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan2# info admin-state enable version OSPF_V3 address-family IPV4_UNICAST router-id 1.1.1.2 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } } WAN3 - cEOS router # On cEOS the configuration is slightly different, First we enable the isis instance with the specific net/system id and disable hello-padding router isis lab no hello padding net 49.0001.0003.0000.0000.00 log-adjacency-changes ! address-family ipv4 unicast ! address-family ipv6 unicast ! After we map the interfaces to the isis instance interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 isis enable lab isis network point-to-point ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 isis enable lab isis network point-to-point ! Viewing ISIS state # Now that we configured OSPF on the various devices we can look at the operational state of the various devices ISIS adjacency # On SRL devices A:wan1# show / network-instance default protocols isis adjacency Network Instance: default Instance : lab +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0002.0000.0000 | L2 | ethernet-1/1.1 | 192.1.1.2 | fe80::201:1ff:f | up | 2020-08-30T16:3 | 22 | | | | | | eff:0 | | 4:10.100Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0003.0000.0000 | L1L2 | ethernet-1/2.1 | 192.1.3.2 | fe80::44f4:d4ff | up | 2020-08-30T16:3 | 22 | | | | | | :fec9:1af1 | | 4:20.500Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +===================+=================+================+============+==============+=======+=================+===================+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ Adjacency Count: 2 ================================================================================================================================== On cEOS device ISIS database # On SRL devices A:wan1# show / network-instance default protocols isis database ---------------------------------------------------------------------------------------------------------------------------------- Network Instance: default Instance : lab +--------------+----------------------+----------+----------+----------+------------+ | Level Number | Lsp Id | Sequence | Checksum | Lifetime | Attributes | +==============+======================+==========+==========+==========+============+ | 2 | 0001.0000.0000.00-00 | 0x1d | 0x6dab | 834 | L1 L2 | | 2 | 0002.0000.0000.00-00 | 0x4b | 0xd217 | 809 | L1 L2 | | 2 | 0003.0000.0000.00-00 | 0x13 | 0xa8e5 | 937 | L1 L2 | +--------------+----------------------+----------+----------+----------+------------+ LSP Count: 3 ---------------------------------------------------------------------------------------------------------------------------------- On cEOS device wan3(config-router-isis)#sh isis database IS-IS Instance: lab VRF: default IS-IS Level 1 Link State Database LSPID Seq Num Cksum Life IS Flags wan3.00-00 14 20104 466 L2 <> IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life IS Flags wan1.00-00 30 27564 985 L2 <> wan2.00-00 76 53272 907 L2 <> wan3.00-00 19 43237 444 L2 <> Routing table # on SRL devices A:wan1# show / network-instance default route-table all ---------------------------------------------------------------------------------------------------------------------------------- IPv4 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 1.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 1.1.1.2/32 | 0 | true | isis | 10 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.0/24 | 0 | true | local | 0 | 0 | 192.1.1.1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.1.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | | 192.1.2.0/24 | 0 | true | isis | 20 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.3.0/24 | 0 | true | local | 0 | 0 | 192.1.3.1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 192.1.3.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.3.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 9 IPv4 routes total 9 IPv4 prefixes with active routes 0 IPv4 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------- IPv6 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 2000:192:1::/64 | 0 | true | local | 0 | 0 | 2000:192:1::1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:1::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 2000:192:2::/64 | 0 | true | isis | 20 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:3::/64 | 0 | true | local | 0 | 0 | 2000:192:3::1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 2000:192:3::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::2/128 | 0 | true | isis | 10 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 7 IPv6 routes total 7 IPv6 prefixes with active routes 0 IPv6 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- on cEOS device wan3(config)#sh ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - BGP, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route Gateway of last resort is not set I L2 1.1.1.1/32 [115/10] via 192.1.3.1, Ethernet2 I L2 1.1.1.2/32 [115/10] via 192.1.2.1, Ethernet1 I L2 192.1.1.0/24 [115/20] via 192.1.2.1, Ethernet1 via 192.1.3.1, Ethernet2 C 192.1.2.0/24 is directly connected, Ethernet1 C 192.1.3.0/24 is directly connected, Ethernet2 wan3(config)#sh ipv6 route VRF: default Displaying 5 of 11 IPv6 routing table entries Codes: C - connected, S - static, K - kernel, O3 - OSPFv3, B - BGP, R - RIP, A B - BGP Aggregate, I L1 - IS-IS level 1, I L2 - IS-IS level 2, DH - DHCP, NG - Nexthop Group Static Route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route I L2 2000:192:1::/64 [115/20] via fe80::201:1ff:feff:1, Ethernet1 via fe80::201:ff:feff:1, Ethernet2 C 2000:192:2::/64 [0/1] via Ethernet1, directly connected C 2000:192:3::/64 [0/1] via Ethernet2, directly connected I L2 3000::1/128 [115/10] via fe80::201:ff:feff:1, Ethernet2 I L2 3000::2/128 [115/10] via fe80::201:1ff:feff:1, Ethernet1","title":"Configuring OSPFv3 between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#configuring-ospfv3-between-nokia-srl-and-arista-ceos","text":"This note describes how to setup ospfv3 between Nokia SRLinux and Arista cEOS. We use a triangle topology with 2 SRL and 1 cEOS device as an example WAN1 (SRL) (e1-1) -------(e1-1) WAN2 (SRL) (e1-2) (e1-2) | | +--(Et2) WAN3 (cEOS) (Et1)---+ We configure both IPv4 and IPv6 to show both address families working through OSPFv3","title":"Configuring OSPFv3 between Nokia SRL and Arista cEOS"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#configuring-interfaces","text":"First we have to configure the interfaces on the various devices","title":"Configuring interfaces"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan1-srl-router","text":"Configure the interface on WAN1 to WAN2 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.1.1/24 { } } ipv6 { address 2000:192:1::1/64 { } } } Configure the interface on WAN1 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan1# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.3.1/24 { } } ipv6 { address 2000:192:3::1/64 { } } }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan2-srl-router","text":"Configure the interface on WAN2 to WAN1 SRL --{ running }--[ interface ethernet-1/1 ]-- A:wan2# info subinterface 1 { admin-state enable ipv4 { address 192.1.1.2/24 { } } ipv6 { address 2000:192:1::2/64 { } } } Configure the interface on WAN2 to WAN3 cEOS --{ running }--[ interface ethernet-1/2 ]-- A:wan2# info admin-state enable subinterface 1 { admin-state enable ipv4 { address 192.1.2.1/24 { } } ipv6 { address 2000:192:2::1/64 { } } }","title":"WAN2- SRL router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan3-ceos-router","text":"Configure the interface on WAN3 to WAN2 SRL interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 Configure the interface on WAN3 to WAN2 SRL interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#configuring-the-router-instance","text":"Before we can configure OSPFv3 we should enable the router instance on the various devices. On SRL we create a network-instance, which is like a VRF-Lite and can be used for the global routing table. In cEOS we enable ip routing and ipv6 routing","title":"Configuring the router instance"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan1-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan1# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan2-srl-router_1","text":"--{ running }--[ network-instance default ]-- A:wan2# info type default admin-state enable interface ethernet-1/1.1 { } interface ethernet-1/2.1 { } interface lo1.1 { }","title":"WAN2- SRL router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan3-ceos-router_1","text":"ip routing ! ipv6 unicast-routing !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#configuring-ospfv3","text":"After the interfaces are configured we will configure an OSPFv3 Backbone area 0.0.0.0 between the various routers.","title":"Configuring OSPFv3"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan1-srl-router_2","text":"On SRL we create a OSPFv3 protocol instance --{ running }--[ network-instance default ]-- A:wan1# protocols ospf instance lab After we configure the ospf parameters like: admin-state: enables the ospf instance version: allows to select the OSPF version OSPFv2 or OSPFv3 address-family: IPV4_UNICAST or IPV6_UNICAST router-id: typically setup using the system loopback of the router, which is the same ip address as configured on lo0.1 area: here we use area 0.0.0.0 with its interfaces There are many more features supported by SRL which can be read in the configuration guides --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan1# info admin-state enable version OSPF_V3 address-family IPV4_UNICAST router-id 1.1.1.1 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } }","title":"WAN1 - SRL router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan2-srl-router_2","text":"A similar configuration is setup on WAN2 router --{ running }--[ network-instance default protocols ospf instance lab ]-- A:wan2# info admin-state enable version OSPF_V3 address-family IPV4_UNICAST router-id 1.1.1.2 area 0.0.0.0 { interface ethernet-1/1.1 { admin-state enable interface-type point-to-point } interface ethernet-1/2.1 { admin-state enable interface-type point-to-point } interface lo1.1 { admin-state enable passive true } }","title":"WAN2 - SRL router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#wan3-ceos-router_2","text":"On cEOS the configuration is slightly different, First we enable the isis instance with the specific net/system id and disable hello-padding router isis lab no hello padding net 49.0001.0003.0000.0000.00 log-adjacency-changes ! address-family ipv4 unicast ! address-family ipv6 unicast ! After we map the interfaces to the isis instance interface Ethernet1 no switchport ip address 192.1.2.2/24 ipv6 address 2000:192:2::2/64 isis enable lab isis network point-to-point ! interface Ethernet2 no switchport ip address 192.1.3.2/24 ipv6 address 2000:192:3::2/64 isis enable lab isis network point-to-point !","title":"WAN3 - cEOS router"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#viewing-isis-state","text":"Now that we configured OSPF on the various devices we can look at the operational state of the various devices","title":"Viewing ISIS state"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#isis-adjacency","text":"On SRL devices A:wan1# show / network-instance default protocols isis adjacency Network Instance: default Instance : lab +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0002.0000.0000 | L2 | ethernet-1/1.1 | 192.1.1.2 | fe80::201:1ff:f | up | 2020-08-30T16:3 | 22 | | | | | | eff:0 | | 4:10.100Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +==================+=================+================+============+=================+=======+=================+=================+ | 0003.0000.0000 | L1L2 | ethernet-1/2.1 | 192.1.3.2 | fe80::44f4:d4ff | up | 2020-08-30T16:3 | 22 | | | | | | :fec9:1af1 | | 4:20.500Z | | +------------------+-----------------+----------------+------------+-----------------+-------+-----------------+-----------------+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ | Neighbor System | Adjacency Level | Interface Name | Ip Address | Ipv6 Address | State | Last transition | Remaining | | Id | | | | | | | holdtime | +===================+=================+================+============+==============+=======+=================+===================+ +-------------------+-----------------+----------------+------------+--------------+-------+-----------------+-------------------+ Adjacency Count: 2 ================================================================================================================================== On cEOS device","title":"ISIS adjacency"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#isis-database","text":"On SRL devices A:wan1# show / network-instance default protocols isis database ---------------------------------------------------------------------------------------------------------------------------------- Network Instance: default Instance : lab +--------------+----------------------+----------+----------+----------+------------+ | Level Number | Lsp Id | Sequence | Checksum | Lifetime | Attributes | +==============+======================+==========+==========+==========+============+ | 2 | 0001.0000.0000.00-00 | 0x1d | 0x6dab | 834 | L1 L2 | | 2 | 0002.0000.0000.00-00 | 0x4b | 0xd217 | 809 | L1 L2 | | 2 | 0003.0000.0000.00-00 | 0x13 | 0xa8e5 | 937 | L1 L2 | +--------------+----------------------+----------+----------+----------+------------+ LSP Count: 3 ---------------------------------------------------------------------------------------------------------------------------------- On cEOS device wan3(config-router-isis)#sh isis database IS-IS Instance: lab VRF: default IS-IS Level 1 Link State Database LSPID Seq Num Cksum Life IS Flags wan3.00-00 14 20104 466 L2 <> IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life IS Flags wan1.00-00 30 27564 985 L2 <> wan2.00-00 76 53272 907 L2 <> wan3.00-00 19 43237 444 L2 <>","title":"ISIS database"},{"location":"configuration/protocols/OSPFv3-SRL-cEOS/#routing-table","text":"on SRL devices A:wan1# show / network-instance default route-table all ---------------------------------------------------------------------------------------------------------------------------------- IPv4 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 1.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 1.1.1.2/32 | 0 | true | isis | 10 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.0/24 | 0 | true | local | 0 | 0 | 192.1.1.1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.1.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.1.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | | 192.1.2.0/24 | 0 | true | isis | 20 | 18 | 192.1.1.2 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 192.1.3.0/24 | 0 | true | local | 0 | 0 | 192.1.3.1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 192.1.3.1/32 | 0 | true | host | 0 | 0 | None (extract) | None | | 192.1.3.255/32 | 0 | true | host | 0 | 0 | None (broadcast) | None | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 9 IPv4 routes total 9 IPv4 prefixes with active routes 0 IPv4 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------------- IPv6 Unicast route table of network instance default ---------------------------------------------------------------------------------------------------------------------------------- +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ | Prefix | ID | Active | Owner | Metric | Pref | Next-hop (Type) | Next-hop | | | | | | | | | Interface | +=======================+======+===========+================+========+======+===============================+==============+ | 2000:192:1::/64 | 0 | true | local | 0 | 0 | 2000:192:1::1 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:1::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 2000:192:2::/64 | 0 | true | isis | 20 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | | 2000:192:3::/64 | 0 | true | local | 0 | 0 | 2000:192:3::1 (direct) | ethernet-1/2 | | | | | | | | | .1 | | 2000:192:3::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::1/128 | 0 | true | host | 0 | 0 | None (extract) | None | | 3000::2/128 | 0 | true | isis | 10 | 18 | fe80::201:1ff:feff:0 (direct) | ethernet-1/1 | | | | | | | | | .1 | +-----------------------+------+-----------+----------------+--------+------+-------------------------------+--------------+ ---------------------------------------------------------------------------------------------------------------------------------- 7 IPv6 routes total 7 IPv6 prefixes with active routes 0 IPv6 prefixes with active ECMP routes ---------------------------------------------------------------------------------------------------------------------------------- on cEOS device wan3(config)#sh ip route VRF: default Codes: C - connected, S - static, K - kernel, O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1, E2 - OSPF external type 2, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type2, B - BGP, B I - iBGP, B E - eBGP, R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2, O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary, NG - Nexthop Group Static Route, V - VXLAN Control Service, DH - DHCP client installed default route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route Gateway of last resort is not set I L2 1.1.1.1/32 [115/10] via 192.1.3.1, Ethernet2 I L2 1.1.1.2/32 [115/10] via 192.1.2.1, Ethernet1 I L2 192.1.1.0/24 [115/20] via 192.1.2.1, Ethernet1 via 192.1.3.1, Ethernet2 C 192.1.2.0/24 is directly connected, Ethernet1 C 192.1.3.0/24 is directly connected, Ethernet2 wan3(config)#sh ipv6 route VRF: default Displaying 5 of 11 IPv6 routing table entries Codes: C - connected, S - static, K - kernel, O3 - OSPFv3, B - BGP, R - RIP, A B - BGP Aggregate, I L1 - IS-IS level 1, I L2 - IS-IS level 2, DH - DHCP, NG - Nexthop Group Static Route, M - Martian, DP - Dynamic Policy Route, L - VRF Leaked, RC - Route Cache Route I L2 2000:192:1::/64 [115/20] via fe80::201:1ff:feff:1, Ethernet1 via fe80::201:ff:feff:1, Ethernet2 C 2000:192:2::/64 [0/1] via Ethernet1, directly connected C 2000:192:3::/64 [0/1] via Ethernet2, directly connected I L2 3000::1/128 [115/10] via fe80::201:ff:feff:1, Ethernet2 I L2 3000::2/128 [115/10] via fe80::201:1ff:feff:1, Ethernet1","title":"Routing table"},{"location":"configuration/system/tacacs/","text":"TACACS+ Docker Image # This image is a built version of tac_plus, a TACACS+ implementation written by Marc Huber. Building the image # Note: this image is not meant for production use, it was build to help people understand the SR-linux tacacs implementation. Build/Tag: make all make tag Push image to docker hub docker push henderiw/tacacs-plus-alpine:1.0.0 Run the image from docker hub # When you are happy with the tac_plus.cfg configuration example, you can use the image with the default tacacs configuration docker run --name tac_plus -d -p 49:49 --network host henderiw/tacacs-plus-alpine:1.0.0 When you want to upload your own configuration, you can volume mount your specific tacacs configuration Example: below docker run --name tac_plus -d -p 49:49 --network host -v ~/tac_plus/tac_plus.cfg:/etc/tac_plus/tac_plus.cfg henderiw/tacacs-plus-alpine:1.0.0 When you run the image in a different bridge you might have to extend some iptables rules to allow communication between the SRL container and the atc_plus container. sudo iptables -I DOCKER-USER -i srlinux-mgmt -o docker0 -j ACCEPT sudo iptables -I DOCKER-USER -i docker0 -o srlinux-mgmt -j ACCEPT sudo iptables -t nat -I POSTROUTING 1 -o srlinux-mgmt -s 172.17.0.0/16 -j ACCEPT sudo iptables -t nat -I POSTROUTING 1 -o docker0 -s 10.1.1.0/24 -j ACCEPT sudo iptables -t nat -I POSTROUTING 1 -o srlinux-mgmt -s 10.1.1.0/24 -j ACCEPT Example configuration on SRL # We configured 3 servers: 2 ipv4 and 1 ipv6 for both authorization and accounting --{ candidate shared }--[ system aaa ]-- A:ist1-dc-fab-f1p1-leaf1# info authentication { exit-on-reject false authentication-method [ tac_plus local ] } accounting { accounting-method [ tac_plus local ] event command { record start-stop } } server-group local { timeout 10 } server-group tac_plus { timeout 2 server 10.1.1.10 { name tac_plus network-instance mgmt tacacs { port 49 secret-key $aes$a97cpXsHbYuU=$rAqajiK1tvAdc1FREJ8RcA== } } server 172.17.0.2 { name tac_plus network-instance mgmt tacacs { port 49 secret-key $aes$a97cpXsHbYuU=$rAqajiK1tvAdc1FREJ8RcA== } } server 2001:10:1:1::a { name tac_plus network-instance mgmt tacacs { port 49 secret-key $aes$a97cpXsHbYuU=$rAqajiK1tvAdc1FREJ8RcA== } } } Example login and logging information # Login example: ssh hans@10.1.1.2 hans@10.1.1.2's password: Last login: Fri Jul 17 18:01:55 2020 from 10.1.1.1 Using configuration file '/etc/opt/srlinux/srlinux.rc' Welcome to the srlinux CLI. Type 'help' (and press <ENTER>) if you need any help using this. --{ running }--[ ]-- Logging exmple: docker logs tac_plus Starting server... 2020-07-17 17:41:26 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=129 timezone=UTC service=shell priv-lvl=15 cmd=commit stay 2020-07-17 17:42:01 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=130 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:42:01 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=130 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:42:11 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=131 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:42:11 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=131 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:42:17 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=132 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:42:17 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=132 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:42:19 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=133 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:42:19 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=133 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:57:25 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=134 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:25 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=134 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:28 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=135 timezone=UTC service=shell priv-lvl=15 cmd=back 2020-07-17 17:57:28 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=135 timezone=UTC service=shell priv-lvl=15 cmd=back 2020-07-17 17:57:29 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=136 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:29 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=136 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:33 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=137 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:33 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=137 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:34 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=138 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:34 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=138 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:36 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=139 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:36 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=139 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 18:01:20 +0000 10.1.1.2 wim ssh 10.1.1.1 start task_id=3 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 18:01:20 +0000 10.1.1.2 wim ssh 10.1.1.1 stop task_id=3 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 18:01:22 +0000 10.1.1.2 wim ssh 10.1.1.1 start task_id=4 timezone=UTC service=shell priv-lvl=15 cmd=quit 2020-07-17 18:01:22 +0000 10.1.1.2 wim ssh 10.1.1.1 stop task_id=4 timezone=UTC service=shell priv-lvl=15 cmd=quit 2020-07-17 18:01:50 +0000 10.1.1.2 hans ssh 10.1.1.1 ascii login failed 2020-07-17 18:01:55 +0000 10.1.1.2 hans ssh 10.1.1.1 ascii login succeeded","title":"TACACS+ Docker Image"},{"location":"configuration/system/tacacs/#tacacs-docker-image","text":"This image is a built version of tac_plus, a TACACS+ implementation written by Marc Huber.","title":"TACACS+ Docker Image"},{"location":"configuration/system/tacacs/#building-the-image","text":"Note: this image is not meant for production use, it was build to help people understand the SR-linux tacacs implementation. Build/Tag: make all make tag Push image to docker hub docker push henderiw/tacacs-plus-alpine:1.0.0","title":"Building the image"},{"location":"configuration/system/tacacs/#run-the-image-from-docker-hub","text":"When you are happy with the tac_plus.cfg configuration example, you can use the image with the default tacacs configuration docker run --name tac_plus -d -p 49:49 --network host henderiw/tacacs-plus-alpine:1.0.0 When you want to upload your own configuration, you can volume mount your specific tacacs configuration Example: below docker run --name tac_plus -d -p 49:49 --network host -v ~/tac_plus/tac_plus.cfg:/etc/tac_plus/tac_plus.cfg henderiw/tacacs-plus-alpine:1.0.0 When you run the image in a different bridge you might have to extend some iptables rules to allow communication between the SRL container and the atc_plus container. sudo iptables -I DOCKER-USER -i srlinux-mgmt -o docker0 -j ACCEPT sudo iptables -I DOCKER-USER -i docker0 -o srlinux-mgmt -j ACCEPT sudo iptables -t nat -I POSTROUTING 1 -o srlinux-mgmt -s 172.17.0.0/16 -j ACCEPT sudo iptables -t nat -I POSTROUTING 1 -o docker0 -s 10.1.1.0/24 -j ACCEPT sudo iptables -t nat -I POSTROUTING 1 -o srlinux-mgmt -s 10.1.1.0/24 -j ACCEPT","title":"Run the image from docker hub"},{"location":"configuration/system/tacacs/#example-configuration-on-srl","text":"We configured 3 servers: 2 ipv4 and 1 ipv6 for both authorization and accounting --{ candidate shared }--[ system aaa ]-- A:ist1-dc-fab-f1p1-leaf1# info authentication { exit-on-reject false authentication-method [ tac_plus local ] } accounting { accounting-method [ tac_plus local ] event command { record start-stop } } server-group local { timeout 10 } server-group tac_plus { timeout 2 server 10.1.1.10 { name tac_plus network-instance mgmt tacacs { port 49 secret-key $aes$a97cpXsHbYuU=$rAqajiK1tvAdc1FREJ8RcA== } } server 172.17.0.2 { name tac_plus network-instance mgmt tacacs { port 49 secret-key $aes$a97cpXsHbYuU=$rAqajiK1tvAdc1FREJ8RcA== } } server 2001:10:1:1::a { name tac_plus network-instance mgmt tacacs { port 49 secret-key $aes$a97cpXsHbYuU=$rAqajiK1tvAdc1FREJ8RcA== } } }","title":"Example configuration on SRL"},{"location":"configuration/system/tacacs/#example-login-and-logging-information","text":"Login example: ssh hans@10.1.1.2 hans@10.1.1.2's password: Last login: Fri Jul 17 18:01:55 2020 from 10.1.1.1 Using configuration file '/etc/opt/srlinux/srlinux.rc' Welcome to the srlinux CLI. Type 'help' (and press <ENTER>) if you need any help using this. --{ running }--[ ]-- Logging exmple: docker logs tac_plus Starting server... 2020-07-17 17:41:26 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=129 timezone=UTC service=shell priv-lvl=15 cmd=commit stay 2020-07-17 17:42:01 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=130 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:42:01 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=130 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:42:11 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=131 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:42:11 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=131 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:42:17 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=132 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:42:17 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=132 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:42:19 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=133 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:42:19 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=133 timezone=UTC service=shell priv-lvl=15 cmd=info from state 2020-07-17 17:57:25 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=134 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:25 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=134 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:28 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=135 timezone=UTC service=shell priv-lvl=15 cmd=back 2020-07-17 17:57:28 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=135 timezone=UTC service=shell priv-lvl=15 cmd=back 2020-07-17 17:57:29 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=136 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:29 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=136 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:33 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=137 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:33 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=137 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:34 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=138 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:34 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=138 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 17:57:36 +0000 10.1.1.2 admin ssh 10.1.1.1 start task_id=139 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 17:57:36 +0000 10.1.1.2 admin ssh 10.1.1.1 stop task_id=139 timezone=UTC service=shell priv-lvl=15 cmd=info 2020-07-17 18:01:20 +0000 10.1.1.2 wim ssh 10.1.1.1 start task_id=3 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 18:01:20 +0000 10.1.1.2 wim ssh 10.1.1.1 stop task_id=3 timezone=UTC service=shell priv-lvl=15 cmd=exit 2020-07-17 18:01:22 +0000 10.1.1.2 wim ssh 10.1.1.1 start task_id=4 timezone=UTC service=shell priv-lvl=15 cmd=quit 2020-07-17 18:01:22 +0000 10.1.1.2 wim ssh 10.1.1.1 stop task_id=4 timezone=UTC service=shell priv-lvl=15 cmd=quit 2020-07-17 18:01:50 +0000 10.1.1.2 hans ssh 10.1.1.1 ascii login failed 2020-07-17 18:01:55 +0000 10.1.1.2 hans ssh 10.1.1.1 ascii login succeeded","title":"Example login and logging information"},{"location":"getting-started/containerlab/","text":"ContainerLab # Setting up SRL can be done using containerlab","title":"ContainerLab"},{"location":"getting-started/containerlab/#containerlab","text":"Setting up SRL can be done using containerlab","title":"ContainerLab"},{"location":"getting-started/introduction/","text":"","title":"Introduction"},{"location":"ndk-agents/golang/","text":"Developing an AGENT in Golang # This document defines the steps to create an agent in golang . To build an agent the following steps should be followed: Initialize the project using go mod Yang Define the YANG model Validate the YANG model Generate Code for the YANG model Initialize the project using go mod # go mod init github.com/srl-wim/srl-ndk-git YANG # Defining the YANG model # The first step in creating an agent is defining the YANG model, which defines the configuration and state of the application. Validate the yang model # Once you have defined the YANG model, we should check for errors and validate the model. pyang is a perfect tool for that as shown in the below example. (srl) henderiw@henderiw-mackbook-pro-16 git % pyang -f tree -p yang/ yang/git.yang module: git +--rw git! +--rw organization? string +--rw repo? string +--rw file? string +--rw token? string +--rw author? string +--rw author-email? string +--rw branch? string +--rw action? string +--ro oper-state? srl_nokia-comm:oper-state +--ro statistics +--ro success? srl_nokia-comm:zero-based-counter64 +--ro failure? srl_nokia-comm:zero-based-counter64 Golang # # YML file # GIT # # This is an example goreleaser.yaml file with some sane defaults. # Make sure to check the documentation at http://goreleaser.com before: hooks: # You may remove this if you don't use go modules. - go mod download # you may remove this if you don't need go generate - go generate ./... builds: - env: - CGO_ENABLED=0 ldflags: - -s -w -X github.com/srl-wim/srl-ndk-git/cmd.version={{.Version}} -X github.com/srl-wim/srl-ndk-git/cmd.commit={{.ShortCommit}} -X github.com/srl-wim/srl-ndk-git/cmd.date={{.Date}} goos: - linux # - windows - darwin archives: - replacements: darwin: Darwin linux: Linux #windows: Windows #386: i386 #amd64: x86_64 checksum: name_template: \"checksums.txt\" snapshot: name_template: \"{{ .Tag }}-next\" changelog: sort: asc filters: exclude: - \"^docs:\" - \"^test:\" nfpms: - id: \"srlndk-git\" package_name: \"srlndk-git\" maintainer: \"Wim Henderickx <wim.henderickx@nokia.com>\" description: | srlndk-git written in go vendor: \"Nokia\" license: \"BSD 2\" formats: - rpm - deb bindir: /usr/bin files: ./dist/srl-ndk-git_linux_amd64/srl-ndk-git: \"/opt/srlinux/usr/bin/ndk-git\" config_files: ./yang/ndk-git.yang: \"/opt/ndk-git/yang/ndk-git.yang\" ./yml/ndk-git.yml: \"/etc/opt/srlinux/appmgr/ndk-git.yml\" overrides: rpm: scripts:","title":"Developing an AGENT in Golang"},{"location":"ndk-agents/golang/#developing-an-agent-in-golang","text":"This document defines the steps to create an agent in golang . To build an agent the following steps should be followed: Initialize the project using go mod Yang Define the YANG model Validate the YANG model Generate Code for the YANG model","title":"Developing an AGENT in Golang"},{"location":"ndk-agents/golang/#initialize-the-project-using-go-mod","text":"go mod init github.com/srl-wim/srl-ndk-git","title":"Initialize the project using go mod"},{"location":"ndk-agents/golang/#yang","text":"","title":"YANG"},{"location":"ndk-agents/golang/#defining-the-yang-model","text":"The first step in creating an agent is defining the YANG model, which defines the configuration and state of the application.","title":"Defining the YANG model"},{"location":"ndk-agents/golang/#validate-the-yang-model","text":"Once you have defined the YANG model, we should check for errors and validate the model. pyang is a perfect tool for that as shown in the below example. (srl) henderiw@henderiw-mackbook-pro-16 git % pyang -f tree -p yang/ yang/git.yang module: git +--rw git! +--rw organization? string +--rw repo? string +--rw file? string +--rw token? string +--rw author? string +--rw author-email? string +--rw branch? string +--rw action? string +--ro oper-state? srl_nokia-comm:oper-state +--ro statistics +--ro success? srl_nokia-comm:zero-based-counter64 +--ro failure? srl_nokia-comm:zero-based-counter64","title":"Validate the yang model"},{"location":"ndk-agents/golang/#golang","text":"","title":"Golang"},{"location":"ndk-agents/golang/#_1","text":"","title":""},{"location":"ndk-agents/golang/#yml-file","text":"","title":"YML file"},{"location":"ndk-agents/golang/#git","text":"# This is an example goreleaser.yaml file with some sane defaults. # Make sure to check the documentation at http://goreleaser.com before: hooks: # You may remove this if you don't use go modules. - go mod download # you may remove this if you don't need go generate - go generate ./... builds: - env: - CGO_ENABLED=0 ldflags: - -s -w -X github.com/srl-wim/srl-ndk-git/cmd.version={{.Version}} -X github.com/srl-wim/srl-ndk-git/cmd.commit={{.ShortCommit}} -X github.com/srl-wim/srl-ndk-git/cmd.date={{.Date}} goos: - linux # - windows - darwin archives: - replacements: darwin: Darwin linux: Linux #windows: Windows #386: i386 #amd64: x86_64 checksum: name_template: \"checksums.txt\" snapshot: name_template: \"{{ .Tag }}-next\" changelog: sort: asc filters: exclude: - \"^docs:\" - \"^test:\" nfpms: - id: \"srlndk-git\" package_name: \"srlndk-git\" maintainer: \"Wim Henderickx <wim.henderickx@nokia.com>\" description: | srlndk-git written in go vendor: \"Nokia\" license: \"BSD 2\" formats: - rpm - deb bindir: /usr/bin files: ./dist/srl-ndk-git_linux_amd64/srl-ndk-git: \"/opt/srlinux/usr/bin/ndk-git\" config_files: ./yang/ndk-git.yang: \"/opt/ndk-git/yang/ndk-git.yang\" ./yml/ndk-git.yml: \"/etc/opt/srlinux/appmgr/ndk-git.yml\" overrides: rpm: scripts:","title":"GIT"},{"location":"ndk-agents/introduction/","text":"Building an SRL Agent # Introduction # SR Linux is an open NOS that can be extended through the use of Agents. Agents are applications that can be build by anyone in almost any programming language ( golang , python , c , c++ , java , javascript , rugby , dart , PHP ), to extend the SRL NOS and make it suitable for your specific environment. Multiple use case can be considered and the capabilities are endless. E.g. - Operations - Telemetry - Event Handling - Routing Protocols - Synthetic OAM - Security - Cloud - etc In this document we detail the basics of how such agents can be build, packaged and used in production. Through a hello world example we illustrate the steps YANG file # The first step is defining how the agent should be configured, how it is exposing its state and how it is notifying the ouside world about important information it sees. SRL is using YANG, which is a data modeling language defined in IETF, for describing the configuration and state elements of the agent. YANG is defined in RFC6020 (YANG 1.0) and RFC7950 (YANG 1.1). The base SRL data YANG files can be found here: Base SRL YANG modes To Illustrate how to build a YANG file an example is shown below based on a simple hello world example: module helloworld { yang-version 1.1; // namespace namespace \"urn:srl_ndk_apps/helloworld\"; prefix \"srl_ndk_apps-helloworld\"; revision \"2020-06-05\" { description \"Initial revision\"; } grouping helloworld-top { description \"Top level grouping for hello world sample app\"; container hello { presence \"Top-level container for the hello world sample app\"; description \"Top level enclosing container for helloworld sample app config and operational state data\"; leaf name { description \"Who am I saying hello to?\"; type string { length 0..255; pattern '[A-Za-z0-9]*'; } } leaf response { config false; description \"Response to input\"; type string; } } } uses helloworld-top; } You can build of course more advanced YANG models and there is many more parameters defined in the YANG data modeling language, so it is good to check out RFC6020 (YANG 1.0) and RFC7950 (YANG 1.1). I just wanted to explain some basic concepts to get you started. Elements used in the example are: - module: name of the module, here we use the name of the agent - yang-version: We use YANG1.1 as defined in RFC7950 - namespace: Each module is bound to a namespace to make them unique in your environemnt. Hence it is good practice to use the agent name in the namespace element. - prefix: The \"prefix\" statement is used to define the prefix associated with the module and its namespace. It is used to access the module - revision: specifies the editorial revision history of the module - grouping: The \"grouping\" statement is used to define a reusable block of nodes, which may be used locally in the module or submodule, and by other modules that import from it - container: defines an interior data node in the schema tree, in this example hello - leaf: used to define a leaf node in the schema tree - config: false, means this is a state - type: defines the types, similar to programming languages like string, integers, enums, etc - uses: By using pyang you can validate your yang file and check for inconsistencies. If the result is positive, you can start writing your code logic. command: pyang -f tree -p . helloworld.yang output: module: helloworld +--rw hello! +--rw name? string +--ro response? string Code # Now that we understand how the data of the application is modeled we have to write code that performs the specific logic for you application. As mentioned in the beginning, almost any programming language can be used: golang , python , c , c++ , java , javascript , rugby , dart , PHP TO BE EXTENDED YAML file # SRL has a build in system management that handle the lifecycle of the agent. The configuration parameters are defined in a YAML file. An example is here: hello_world: path: /opt/srlinux/usr/bin/ launch-command: ./helloworld search-command: ./helloworld failure-threshold: 100 failure-action: \"wait=60\" wait-for-config: Yes yang-modules: names: - \"helloworld\" source-directories: - \"/opt/helloworld/yang/\" Some clarifiction of the information we see in the example - hello_world: agent name - path: the directory where the agent binary is located - launch-command: the command used to start the applciation - search-command: the command used to search the application - wait-for-config: ensures the agent is not started unless there is a YANG configuration for this agent in the system. it allows to optimize resources and dont run processes when not needed - failure-threshold and failure-action: failure handling and back-off for the system when the agent fails - yang-modules: defines where the yang files for this agent are located - name: yang files - source-directories: location of the yang files Packaging # To package your application up in a rpm package you can use e.g. nfpm a simple deb and rpm packager written in golang . In order to us nfpm define a nfpm.yml file like this # nfpm example config file name: \"gohelloworld\" arch: \"amd64\" platform: \"linux\" version: \"v1\" section: \"default\" priority: \"extra\" replaces: - gohelloworld provides: - gohelloworld maintainer: \"Bruce Wallis <bruce.wallis@nokia.com>\" description: | Simple hello world agent written in go. vendor: \"Nokia\" license: \"BSD 2\" bindir: \"/opt/srlinux/usr/bin/\" files: ./helloworld: \"/opt/srlinux/usr/bin/helloworld\" ./helloworld.yang: \"/opt/helloworld/yang/helloworld.yang\" ./helloworld_config.yml: \"/etc/opt/srlinux/appmgr/helloworld_config.yml\" config_files: overrides: rpm: scripts: The following objects should be defined: - name: agent rpm package name + add the same name in replaces/provides - maintainer: person who maintains this package - vendor - license - bindir: location of the binary, which shouls match with the YML file you create before - files: the files and their respective location on the SRL system; this would be the binary file, the yang files and the YAML file for the lifecycle management of the app Generating the rpm file: nfpm pkg --packager rpm this generates the rpm package gohelloworld-1.0.0.x86_64.rpm Installing # RPM # Using the rpm package it is easy to install by copying it in the system and using rpm install: scp gohelloworld-1.0.0.x86_64.rpm admin@<ip address of srl system>:/tmp sudo rpm -U /tmp/gohelloworld-1.0.0.x86_64.rpm You can of course automate this using ansible or terraform or another automation solution ANSIBLE # Ansible is another way to install the files, but you have to mange the files individually. An example is available in this repo ansible-srl-agent install . Configuration # Now that your agent is installed in the system we have to activate it in the system. We do this in the following way. login into the system ssh admin@<ip address> First we need to load the agent: / tools system app-management application app_mgr reload When you show the applications running on the system the agent should be visible A:ant1-dc-fab-f1p1-leaf1# show system application +------------------+---------+---------+----------------------+--------------------------+ | Name | PID | State | Version | Last Change | +==================+=========+=========+======================+==========================+ | aaa_mgr | 604 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.882Z | | acl_mgr | 616 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | app_mgr | 524 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.945Z | | arp_nd_mgr | 628 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | bfd_mgr | 639 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | bgp_mgr | 1121 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.176Z | | chassis_mgr | 648 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | dev_mgr | 541 | running | | 2020-07-28T16:58:52.199Z | | dhcp_client_mgr | 660 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | dnsmasq-mgmt | 1359 | running | | 2020-07-28T16:58:56.986Z | | fib_mgr | 669 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | gnmi_server | 1147 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.200Z | | hello_world | 1342230 | running | v19.11.7-76-ged9563a | 2020-07-30T08:53:21.092Z | | idb_server | 565 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.424Z | | json_rpc | 1149 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.208Z | | linux_mgr | 681 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | lldp_mgr | 1144 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.190Z | | log_mgr | 690 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | mgmt_server | 700 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | mpls_mgr | 719 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.885Z | | net_inst_mgr | 739 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.885Z | | oam_mgr | 766 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.885Z | | plcy_mgr | 791 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.886Z | | qos_mgr | 1113 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.128Z | | sdk_mgr | 819 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.886Z | | sshd-mgmt | 1349 | running | | 2020-07-28T16:58:56.983Z | | static_route_mgr | 852 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.887Z | | supportd | 532 | running | | 2020-07-28T16:58:52.087Z | | testagent | 16435 | running | v19.11.7-76-ged9563a | 2020-07-28T17:14:17.302Z | | xdp_cpm | 889 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.887Z | | xdp_lc_1 | 927 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.887Z | +------------------+---------+---------+----------------------+--------------------------+ You see the helloworld agent appear in the application list. It has a PID of 1342230 in this example. If you defined in the YML file that the helloworld agent should have waited for configuration, the PID would not have been allocated since there was no configuration in the system and hence the agent process would not have started. Next step is configuring the agent Given SRL is a fully transactional system you first have to enter in the candidate datastore. enter candidate Next you navigate through the CLI based on the YANG tree you defined. / hello commit stay You did not configure anything so far but you triggered the agent to look at the data. When looking at the state of the agent you would see the following info from state output name \"\" response \"Hello, do tell me your name\" The agent is waiting for a name to be configured / hello name wim Commit the changes commit stay When you look at the state again you should see the following information updates info from state output name wim response \"Hello, wim\" Consuming the Agent # Now that the agent is configured and running lets consume the agent from the outside worrld through GNMI. We use the following gnmi client to show the examples. SRL is configured for GNMI in the following way: --{ candidate shared }--[ system gnmi-server ]-- A:ant1-dc-fab-f1p1-leaf1# info admin-state enable timeout 7200 rate-limit 60 session-limit 20 network-instance mgmt { admin-state enable use-authentication true port 57400 tls-profile tls-profile-1 } unix-socket { admin-state disable use-authentication true } --{ candidate shared }--[ system gnmi-server ]-- We use port 57400 in the mgmt network instance. Lets first get the information gnmic -a 10.1.1.2:57400 -u admin -p admin --skip-verify -e json_ietf get --path /hello output { \"source\" : \"10.1.1.2:57400\" , \"timestamp\" : 1596100364586956453 , \"time\" : \"2020-07-30T09:12:44.586956453Z\" , \"updates\" : [ { \"Path\" : \"/helloworld:hello\" , \"values\" : { \"helloworld:hello\" : { \"name\" : \"wim\" , \"response\" : \"Hello, wim\" } } } ] } we can also get streaming telemetry from the system gnmic -a 10.1.1.2:57400 -u admin -p admin --skip-verify -e json_ietf sub --path \"/hello\" output { \"source\" : \"10.1.1.2:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1596101041094828877 , \"time\" : \"2020-07-30T09:24:01.094828877Z\" , \"updates\" : [ { \"Path\" : \"helloworld:hello\" , \"values\" : { \"helloworld:hello\" : { \"name\" : \"wim\" , \"response\" : \"Hello, wim\" } } } ] } when you would update the name in the hello yang tree you will be notified on the change of the data. --{ candidate shared }--[ hello ]-- A:ant1-dc-fab-f1p1-leaf1# name bruce --{ candidate shared }--[ hello ]-- A:ant1-dc-fab-f1p1-leaf1# commit say GNMI subscription output { \"source\" : \"10.1.1.2:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1596101063590975148 , \"time\" : \"2020-07-30T09:24:23.590975148Z\" , \"updates\" : [ { \"Path\" : \"helloworld:hello\" , \"values\" : { \"helloworld:hello\" : { \"name\" : \"bruce\" , \"response\" : \"Hello, bruce\" } } } ] } As you can see hopefully SRL is a very open NOS which provides you a complete extendable framework. SRL leverages YANG as the data modeling language, which is very easy to consume using GNMI and you get a full managable and observable system that can be tailored according your needs. The open NOS. Logging # Information that the agent is providing is also send to /var/log/srlinux/stdout/ .log and can be sent to syslog, etc. Conclusion # I hope you enjoyed the read/experience of the process to go through to extend the SRL NOS using agents. Now it is time to find the time, passion and pleasure to knock yourself out and create your own destiny in networking by leveraging the SRL NOS.","title":"Building an SRL Agent"},{"location":"ndk-agents/introduction/#building-an-srl-agent","text":"","title":"Building an SRL Agent"},{"location":"ndk-agents/introduction/#introduction","text":"SR Linux is an open NOS that can be extended through the use of Agents. Agents are applications that can be build by anyone in almost any programming language ( golang , python , c , c++ , java , javascript , rugby , dart , PHP ), to extend the SRL NOS and make it suitable for your specific environment. Multiple use case can be considered and the capabilities are endless. E.g. - Operations - Telemetry - Event Handling - Routing Protocols - Synthetic OAM - Security - Cloud - etc In this document we detail the basics of how such agents can be build, packaged and used in production. Through a hello world example we illustrate the steps","title":"Introduction"},{"location":"ndk-agents/introduction/#yang-file","text":"The first step is defining how the agent should be configured, how it is exposing its state and how it is notifying the ouside world about important information it sees. SRL is using YANG, which is a data modeling language defined in IETF, for describing the configuration and state elements of the agent. YANG is defined in RFC6020 (YANG 1.0) and RFC7950 (YANG 1.1). The base SRL data YANG files can be found here: Base SRL YANG modes To Illustrate how to build a YANG file an example is shown below based on a simple hello world example: module helloworld { yang-version 1.1; // namespace namespace \"urn:srl_ndk_apps/helloworld\"; prefix \"srl_ndk_apps-helloworld\"; revision \"2020-06-05\" { description \"Initial revision\"; } grouping helloworld-top { description \"Top level grouping for hello world sample app\"; container hello { presence \"Top-level container for the hello world sample app\"; description \"Top level enclosing container for helloworld sample app config and operational state data\"; leaf name { description \"Who am I saying hello to?\"; type string { length 0..255; pattern '[A-Za-z0-9]*'; } } leaf response { config false; description \"Response to input\"; type string; } } } uses helloworld-top; } You can build of course more advanced YANG models and there is many more parameters defined in the YANG data modeling language, so it is good to check out RFC6020 (YANG 1.0) and RFC7950 (YANG 1.1). I just wanted to explain some basic concepts to get you started. Elements used in the example are: - module: name of the module, here we use the name of the agent - yang-version: We use YANG1.1 as defined in RFC7950 - namespace: Each module is bound to a namespace to make them unique in your environemnt. Hence it is good practice to use the agent name in the namespace element. - prefix: The \"prefix\" statement is used to define the prefix associated with the module and its namespace. It is used to access the module - revision: specifies the editorial revision history of the module - grouping: The \"grouping\" statement is used to define a reusable block of nodes, which may be used locally in the module or submodule, and by other modules that import from it - container: defines an interior data node in the schema tree, in this example hello - leaf: used to define a leaf node in the schema tree - config: false, means this is a state - type: defines the types, similar to programming languages like string, integers, enums, etc - uses: By using pyang you can validate your yang file and check for inconsistencies. If the result is positive, you can start writing your code logic. command: pyang -f tree -p . helloworld.yang output: module: helloworld +--rw hello! +--rw name? string +--ro response? string","title":"YANG file"},{"location":"ndk-agents/introduction/#code","text":"Now that we understand how the data of the application is modeled we have to write code that performs the specific logic for you application. As mentioned in the beginning, almost any programming language can be used: golang , python , c , c++ , java , javascript , rugby , dart , PHP TO BE EXTENDED","title":"Code"},{"location":"ndk-agents/introduction/#yaml-file","text":"SRL has a build in system management that handle the lifecycle of the agent. The configuration parameters are defined in a YAML file. An example is here: hello_world: path: /opt/srlinux/usr/bin/ launch-command: ./helloworld search-command: ./helloworld failure-threshold: 100 failure-action: \"wait=60\" wait-for-config: Yes yang-modules: names: - \"helloworld\" source-directories: - \"/opt/helloworld/yang/\" Some clarifiction of the information we see in the example - hello_world: agent name - path: the directory where the agent binary is located - launch-command: the command used to start the applciation - search-command: the command used to search the application - wait-for-config: ensures the agent is not started unless there is a YANG configuration for this agent in the system. it allows to optimize resources and dont run processes when not needed - failure-threshold and failure-action: failure handling and back-off for the system when the agent fails - yang-modules: defines where the yang files for this agent are located - name: yang files - source-directories: location of the yang files","title":"YAML file"},{"location":"ndk-agents/introduction/#packaging","text":"To package your application up in a rpm package you can use e.g. nfpm a simple deb and rpm packager written in golang . In order to us nfpm define a nfpm.yml file like this # nfpm example config file name: \"gohelloworld\" arch: \"amd64\" platform: \"linux\" version: \"v1\" section: \"default\" priority: \"extra\" replaces: - gohelloworld provides: - gohelloworld maintainer: \"Bruce Wallis <bruce.wallis@nokia.com>\" description: | Simple hello world agent written in go. vendor: \"Nokia\" license: \"BSD 2\" bindir: \"/opt/srlinux/usr/bin/\" files: ./helloworld: \"/opt/srlinux/usr/bin/helloworld\" ./helloworld.yang: \"/opt/helloworld/yang/helloworld.yang\" ./helloworld_config.yml: \"/etc/opt/srlinux/appmgr/helloworld_config.yml\" config_files: overrides: rpm: scripts: The following objects should be defined: - name: agent rpm package name + add the same name in replaces/provides - maintainer: person who maintains this package - vendor - license - bindir: location of the binary, which shouls match with the YML file you create before - files: the files and their respective location on the SRL system; this would be the binary file, the yang files and the YAML file for the lifecycle management of the app Generating the rpm file: nfpm pkg --packager rpm this generates the rpm package gohelloworld-1.0.0.x86_64.rpm","title":"Packaging"},{"location":"ndk-agents/introduction/#installing","text":"","title":"Installing"},{"location":"ndk-agents/introduction/#rpm","text":"Using the rpm package it is easy to install by copying it in the system and using rpm install: scp gohelloworld-1.0.0.x86_64.rpm admin@<ip address of srl system>:/tmp sudo rpm -U /tmp/gohelloworld-1.0.0.x86_64.rpm You can of course automate this using ansible or terraform or another automation solution","title":"RPM"},{"location":"ndk-agents/introduction/#ansible","text":"Ansible is another way to install the files, but you have to mange the files individually. An example is available in this repo ansible-srl-agent install .","title":"ANSIBLE"},{"location":"ndk-agents/introduction/#configuration","text":"Now that your agent is installed in the system we have to activate it in the system. We do this in the following way. login into the system ssh admin@<ip address> First we need to load the agent: / tools system app-management application app_mgr reload When you show the applications running on the system the agent should be visible A:ant1-dc-fab-f1p1-leaf1# show system application +------------------+---------+---------+----------------------+--------------------------+ | Name | PID | State | Version | Last Change | +==================+=========+=========+======================+==========================+ | aaa_mgr | 604 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.882Z | | acl_mgr | 616 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | app_mgr | 524 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.945Z | | arp_nd_mgr | 628 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | bfd_mgr | 639 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | bgp_mgr | 1121 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.176Z | | chassis_mgr | 648 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.883Z | | dev_mgr | 541 | running | | 2020-07-28T16:58:52.199Z | | dhcp_client_mgr | 660 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | dnsmasq-mgmt | 1359 | running | | 2020-07-28T16:58:56.986Z | | fib_mgr | 669 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | gnmi_server | 1147 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.200Z | | hello_world | 1342230 | running | v19.11.7-76-ged9563a | 2020-07-30T08:53:21.092Z | | idb_server | 565 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.424Z | | json_rpc | 1149 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.208Z | | linux_mgr | 681 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | lldp_mgr | 1144 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.190Z | | log_mgr | 690 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | mgmt_server | 700 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.884Z | | mpls_mgr | 719 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.885Z | | net_inst_mgr | 739 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.885Z | | oam_mgr | 766 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.885Z | | plcy_mgr | 791 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.886Z | | qos_mgr | 1113 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:53.128Z | | sdk_mgr | 819 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.886Z | | sshd-mgmt | 1349 | running | | 2020-07-28T16:58:56.983Z | | static_route_mgr | 852 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.887Z | | supportd | 532 | running | | 2020-07-28T16:58:52.087Z | | testagent | 16435 | running | v19.11.7-76-ged9563a | 2020-07-28T17:14:17.302Z | | xdp_cpm | 889 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.887Z | | xdp_lc_1 | 927 | running | v19.11.7-76-ged9563a | 2020-07-28T16:58:52.887Z | +------------------+---------+---------+----------------------+--------------------------+ You see the helloworld agent appear in the application list. It has a PID of 1342230 in this example. If you defined in the YML file that the helloworld agent should have waited for configuration, the PID would not have been allocated since there was no configuration in the system and hence the agent process would not have started. Next step is configuring the agent Given SRL is a fully transactional system you first have to enter in the candidate datastore. enter candidate Next you navigate through the CLI based on the YANG tree you defined. / hello commit stay You did not configure anything so far but you triggered the agent to look at the data. When looking at the state of the agent you would see the following info from state output name \"\" response \"Hello, do tell me your name\" The agent is waiting for a name to be configured / hello name wim Commit the changes commit stay When you look at the state again you should see the following information updates info from state output name wim response \"Hello, wim\"","title":"Configuration"},{"location":"ndk-agents/introduction/#consuming-the-agent","text":"Now that the agent is configured and running lets consume the agent from the outside worrld through GNMI. We use the following gnmi client to show the examples. SRL is configured for GNMI in the following way: --{ candidate shared }--[ system gnmi-server ]-- A:ant1-dc-fab-f1p1-leaf1# info admin-state enable timeout 7200 rate-limit 60 session-limit 20 network-instance mgmt { admin-state enable use-authentication true port 57400 tls-profile tls-profile-1 } unix-socket { admin-state disable use-authentication true } --{ candidate shared }--[ system gnmi-server ]-- We use port 57400 in the mgmt network instance. Lets first get the information gnmic -a 10.1.1.2:57400 -u admin -p admin --skip-verify -e json_ietf get --path /hello output { \"source\" : \"10.1.1.2:57400\" , \"timestamp\" : 1596100364586956453 , \"time\" : \"2020-07-30T09:12:44.586956453Z\" , \"updates\" : [ { \"Path\" : \"/helloworld:hello\" , \"values\" : { \"helloworld:hello\" : { \"name\" : \"wim\" , \"response\" : \"Hello, wim\" } } } ] } we can also get streaming telemetry from the system gnmic -a 10.1.1.2:57400 -u admin -p admin --skip-verify -e json_ietf sub --path \"/hello\" output { \"source\" : \"10.1.1.2:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1596101041094828877 , \"time\" : \"2020-07-30T09:24:01.094828877Z\" , \"updates\" : [ { \"Path\" : \"helloworld:hello\" , \"values\" : { \"helloworld:hello\" : { \"name\" : \"wim\" , \"response\" : \"Hello, wim\" } } } ] } when you would update the name in the hello yang tree you will be notified on the change of the data. --{ candidate shared }--[ hello ]-- A:ant1-dc-fab-f1p1-leaf1# name bruce --{ candidate shared }--[ hello ]-- A:ant1-dc-fab-f1p1-leaf1# commit say GNMI subscription output { \"source\" : \"10.1.1.2:57400\" , \"subscription-name\" : \"default\" , \"timestamp\" : 1596101063590975148 , \"time\" : \"2020-07-30T09:24:23.590975148Z\" , \"updates\" : [ { \"Path\" : \"helloworld:hello\" , \"values\" : { \"helloworld:hello\" : { \"name\" : \"bruce\" , \"response\" : \"Hello, bruce\" } } } ] } As you can see hopefully SRL is a very open NOS which provides you a complete extendable framework. SRL leverages YANG as the data modeling language, which is very easy to consume using GNMI and you get a full managable and observable system that can be tailored according your needs. The open NOS.","title":"Consuming the Agent"},{"location":"ndk-agents/introduction/#logging","text":"Information that the agent is providing is also send to /var/log/srlinux/stdout/ .log and can be sent to syslog, etc.","title":"Logging"},{"location":"ndk-agents/introduction/#conclusion","text":"I hope you enjoyed the read/experience of the process to go through to extend the SRL NOS using agents. Now it is time to find the time, passion and pleasure to knock yourself out and create your own destiny in networking by leveraging the SRL NOS.","title":"Conclusion"},{"location":"ndk-agents/python/","text":"","title":"Python"},{"location":"ndk-agents/examples/git-client/","text":"","title":"Git client"},{"location":"ndk-agents/examples/testagent/","text":"","title":"Testagent"},{"location":"python/command/","text":"SR-Linux Command plugin # Introduction # The CLI Plugin is built based on command nodes which are modeled as a nested hierarchy. After entering a given command, you can then enter any of its child commands by calling 'add_command' or 'add_custom_commands_hook' on the command add command # The add_command allows to extend the command tree. The arguments are: syntax: Instance of srlinux.syntax.Syntax. Represents the syntax of how the user can execute the command (i.e. the name plus all the arguments) callback: The hook that will be called when the command is executed, with the following arguments: state (type srlinux.mgmt.cli.CliState) which gives you access to the current state of the CLI engine, as well as access to the server input (type Input) which allows you to request user input output (type CliOutput) which allows you to print output/errors arguments (type CommandNodeWithArguments) All the arguments that the user entered when invoking this command. update_location: If true, this command is added to the current location when executed. git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) branch = git . add_command ( syntax_branch , update_location = False , callback = git_process ) get command # The get_command provide a command node based on a name. E.g. this is used to get the context of an existing command cpmfilter_ipv4 = acl . get_command ( 'cpm-filter' ) . get_command ( 'ipv4-filter' ) add custom commands hook # When extending the CLI hierarchy we have to identify the root of the tree where the command node is to be added. E.g. when you want to extend the tools command at the root syntax_git = Syntax ( 'git' , help = '`Git interaction as a client`' ) git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) E.g. When you want to extend a given cli hierarchy you can lookup the node using the get_command as per example below: acl = state . command_tree . tools_mode . root . get_command ( 'acl' ) cpmfilter_ipv4 = acl . get_command ( 'cpm-filter' ) . get_command ( 'ipv4-filter' ) cpmfilter_ipv6 = acl . get_command ( 'cpm-filter' ) . get_command ( 'ipv6-filter' ) ipv4filter = acl . get_command ( 'ipv4-filter' ) ipv6filter = acl . get_command ( 'ipv6-filter' ) cpmfilter_ipv4 . add_command ( self . _get_syntax (), update_location = False , callback = acl_resequence_process )","title":"command"},{"location":"python/command/#sr-linux-command-plugin","text":"","title":"SR-Linux Command plugin"},{"location":"python/command/#introduction","text":"The CLI Plugin is built based on command nodes which are modeled as a nested hierarchy. After entering a given command, you can then enter any of its child commands by calling 'add_command' or 'add_custom_commands_hook' on the command","title":"Introduction"},{"location":"python/command/#add-command","text":"The add_command allows to extend the command tree. The arguments are: syntax: Instance of srlinux.syntax.Syntax. Represents the syntax of how the user can execute the command (i.e. the name plus all the arguments) callback: The hook that will be called when the command is executed, with the following arguments: state (type srlinux.mgmt.cli.CliState) which gives you access to the current state of the CLI engine, as well as access to the server input (type Input) which allows you to request user input output (type CliOutput) which allows you to print output/errors arguments (type CommandNodeWithArguments) All the arguments that the user entered when invoking this command. update_location: If true, this command is added to the current location when executed. git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) branch = git . add_command ( syntax_branch , update_location = False , callback = git_process )","title":"add command"},{"location":"python/command/#get-command","text":"The get_command provide a command node based on a name. E.g. this is used to get the context of an existing command cpmfilter_ipv4 = acl . get_command ( 'cpm-filter' ) . get_command ( 'ipv4-filter' )","title":"get command"},{"location":"python/command/#add-custom-commands-hook","text":"When extending the CLI hierarchy we have to identify the root of the tree where the command node is to be added. E.g. when you want to extend the tools command at the root syntax_git = Syntax ( 'git' , help = '`Git interaction as a client`' ) git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) E.g. When you want to extend a given cli hierarchy you can lookup the node using the get_command as per example below: acl = state . command_tree . tools_mode . root . get_command ( 'acl' ) cpmfilter_ipv4 = acl . get_command ( 'cpm-filter' ) . get_command ( 'ipv4-filter' ) cpmfilter_ipv6 = acl . get_command ( 'cpm-filter' ) . get_command ( 'ipv6-filter' ) ipv4filter = acl . get_command ( 'ipv4-filter' ) ipv6filter = acl . get_command ( 'ipv6-filter' ) cpmfilter_ipv4 . add_command ( self . _get_syntax (), update_location = False , callback = acl_resequence_process )","title":"add custom commands hook"},{"location":"python/data/","text":"SR-Linux Data class # Introduction # The data class represent all data; both the data retrieved from the server and the data displayed in the show report. The data class allows easy access to a configuration/state instance. When creating a top-level Data object, you must specify an instance of a SchemaNode. The code analyzes the schema, and makes all fields, keys, leaf-lists, and children accessible as attributes. Usage # Class srlinux . data . data . Data ( schema , parent = None , ** keys ) For example, assume that this is the data model: list interface { key 'name' ; field 'admin-state' ; leaflist 'values' ; list subinterface { key 'id' ; } } Get the keys value = data . name Get and set the fields value = data . admin_state # returns the value or None if unset data . admin_state = 'enabled' Get and set leaflists value = data . values # returns a list data . values = [ 'a' , 'b' ] Access children child = data . subinterface . create ( 42 ) # Creates the subinterface with id '42' child = data . subinterface . get ( 42 ) if data . subinterface . exists ( 42 ): # Returns True/False for si in data . subinterface . items (): # Walks all subinterfaces, ordered by their key Note Names are changed so that any character that is not a to z, A to Z, or 0 to 9 is replaced by an \u201c_\u201d. Children # When accessing a child (data.subinterface in the preceding example), an instance of DataChildrenOfType is returned. Follow the link to see all the accessors it provides. Values # All key/field/leaf-list values are of the following types: bool integer string Formatters # To generate the show report, Formatter objects are used. These can be tied to a specific Data object using two methods: By assigning a formatter to the Data.formatter property. By using Data.set_formatter(). Both methods assign the formatter to all sibling Data objects. For example, calling the following sets the formatter for all interfaces and not just for subinterface 42. data . subinterface . get ( 42 ) . formatter = ColumnFormatter () The table below lists the different types of formatters. Formatter Description parent Returns the parent Data object, or None if this is the root. schema Returns the SchemaNode. key_names Returns an iterator over the names of the keys. key_values Returns an iterator over the key values. Iterators are returned in the order specified by self.key_names, which is the same as the order that the keys were added to the SchemaNode. get_key(name) Returns the value of the key with the given name. keys_dict Returns a \u201cname: value\u201d dictionary of the keys. type_name Returns the type-name, which is self.schema.name. field_names Returns an iterator over the names of the fields. field_values Returns an iterator over the field values. Iterators are returned in the order specified by self.field_names, which is the same as the order that the fields were added to the SchemaNode. set_field(name, value) Assigns the value to the field with the given name. get_field(name, default=None) Returns the value of the field with the specified name, or the default if the field is unset. is_field_set(name) Returns True if the field is set. leaflist_names Returns an iterator over the names of the leaf-lists. leaflist_values Returns an iterator over the leaf-list values. Iterators are returned in the order specified by self.leaflist_names, which is the same as the order that the leaf-lists were added to the SchemaNode. get_leaflist(name) Returns a list containing the values of the leaf-list with the specified name. This list is empty if the leaf- list is unset. set_leaflist(name, value) Assigns the value to the leaf-list with the specified name. The value must be a list. is_leaflist_set(name) Returns True if the leaf-list is set. child_names Returns an iterator over the names of the children. get_children(name) Returns the DataChildrenOfType instance that contains all the children of the specified type. This returned object is mutable and can be used to walk/ retrieve/add children. iter_children_by_type(predicate= >) Iterates over all DataChildrenOfType instances for which the predicate is True. By default, this returns all children. iter_children() Iterates over all child instances. get(name) Returns the value of the specified key, field, leaf-list, or child. get_annotations(name=None) Returns a list containing the annotations of this node (if called with no arguments) or the field with the specified name. add_annotation(annotation, name=None) Adds the specified annotation to this node (when called with a single argument) or to the field with the specified name (when called with two arguments). The annotation must be an instance of Annotation. formatter Returns the Formatter that can be used to generate the show report for this Data object. iter_format(max_width) Invokes the Formatter of this Data object. Returns an iterator over the formatted output lines. iter_format_children(max_width) Invokes the Formatter of all children of this Data object. Returns an iterator over the formatted output lines. set_formatter(schema, formatter) Adds a Formatter to the Data object with the specified schema. The schema can be specified as an XPath string (without keys). For example, \u201c/ interface/subinterface\u201d. get_schema(path) Get the SchemaNode of the Data object with the specified path. The path must be an XPath string, for example, \u201c/interface/subinterface\u201d. for more detail on DataChildrenOfType click here","title":"data"},{"location":"python/data/#sr-linux-data-class","text":"","title":"SR-Linux Data class"},{"location":"python/data/#introduction","text":"The data class represent all data; both the data retrieved from the server and the data displayed in the show report. The data class allows easy access to a configuration/state instance. When creating a top-level Data object, you must specify an instance of a SchemaNode. The code analyzes the schema, and makes all fields, keys, leaf-lists, and children accessible as attributes.","title":"Introduction"},{"location":"python/data/#usage","text":"Class srlinux . data . data . Data ( schema , parent = None , ** keys ) For example, assume that this is the data model: list interface { key 'name' ; field 'admin-state' ; leaflist 'values' ; list subinterface { key 'id' ; } } Get the keys value = data . name Get and set the fields value = data . admin_state # returns the value or None if unset data . admin_state = 'enabled' Get and set leaflists value = data . values # returns a list data . values = [ 'a' , 'b' ] Access children child = data . subinterface . create ( 42 ) # Creates the subinterface with id '42' child = data . subinterface . get ( 42 ) if data . subinterface . exists ( 42 ): # Returns True/False for si in data . subinterface . items (): # Walks all subinterfaces, ordered by their key Note Names are changed so that any character that is not a to z, A to Z, or 0 to 9 is replaced by an \u201c_\u201d.","title":"Usage"},{"location":"python/data/#children","text":"When accessing a child (data.subinterface in the preceding example), an instance of DataChildrenOfType is returned. Follow the link to see all the accessors it provides.","title":"Children"},{"location":"python/data/#values","text":"All key/field/leaf-list values are of the following types: bool integer string","title":"Values"},{"location":"python/data/#formatters","text":"To generate the show report, Formatter objects are used. These can be tied to a specific Data object using two methods: By assigning a formatter to the Data.formatter property. By using Data.set_formatter(). Both methods assign the formatter to all sibling Data objects. For example, calling the following sets the formatter for all interfaces and not just for subinterface 42. data . subinterface . get ( 42 ) . formatter = ColumnFormatter () The table below lists the different types of formatters. Formatter Description parent Returns the parent Data object, or None if this is the root. schema Returns the SchemaNode. key_names Returns an iterator over the names of the keys. key_values Returns an iterator over the key values. Iterators are returned in the order specified by self.key_names, which is the same as the order that the keys were added to the SchemaNode. get_key(name) Returns the value of the key with the given name. keys_dict Returns a \u201cname: value\u201d dictionary of the keys. type_name Returns the type-name, which is self.schema.name. field_names Returns an iterator over the names of the fields. field_values Returns an iterator over the field values. Iterators are returned in the order specified by self.field_names, which is the same as the order that the fields were added to the SchemaNode. set_field(name, value) Assigns the value to the field with the given name. get_field(name, default=None) Returns the value of the field with the specified name, or the default if the field is unset. is_field_set(name) Returns True if the field is set. leaflist_names Returns an iterator over the names of the leaf-lists. leaflist_values Returns an iterator over the leaf-list values. Iterators are returned in the order specified by self.leaflist_names, which is the same as the order that the leaf-lists were added to the SchemaNode. get_leaflist(name) Returns a list containing the values of the leaf-list with the specified name. This list is empty if the leaf- list is unset. set_leaflist(name, value) Assigns the value to the leaf-list with the specified name. The value must be a list. is_leaflist_set(name) Returns True if the leaf-list is set. child_names Returns an iterator over the names of the children. get_children(name) Returns the DataChildrenOfType instance that contains all the children of the specified type. This returned object is mutable and can be used to walk/ retrieve/add children. iter_children_by_type(predicate= >) Iterates over all DataChildrenOfType instances for which the predicate is True. By default, this returns all children. iter_children() Iterates over all child instances. get(name) Returns the value of the specified key, field, leaf-list, or child. get_annotations(name=None) Returns a list containing the annotations of this node (if called with no arguments) or the field with the specified name. add_annotation(annotation, name=None) Adds the specified annotation to this node (when called with a single argument) or to the field with the specified name (when called with two arguments). The annotation must be an instance of Annotation. formatter Returns the Formatter that can be used to generate the show report for this Data object. iter_format(max_width) Invokes the Formatter of this Data object. Returns an iterator over the formatted output lines. iter_format_children(max_width) Invokes the Formatter of all children of this Data object. Returns an iterator over the formatted output lines. set_formatter(schema, formatter) Adds a Formatter to the Data object with the specified schema. The schema can be specified as an XPath string (without keys). For example, \u201c/ interface/subinterface\u201d. get_schema(path) Get the SchemaNode of the Data object with the specified path. The path must be an XPath string, for example, \u201c/interface/subinterface\u201d. for more detail on DataChildrenOfType click here","title":"Formatters"},{"location":"python/datachildrenoftype/","text":"SR-Linux DataChildrenOfType class # Introduction # Use this class when you need to access children through a Data object. It allows you to retrieve, create, and iterate all children Usage # Class srlinux . data . data . DataChildrenOfType ( schema , parent ) The children of a Data object are returned by Data.get_children() or by accessing the attribute with the child name (for example, Data.interface). Most methods require you to pass a value for each key defined in the schema. schema without keys data . node . get () data . node . create () data . node . exists () schema with a single key data . node . get ( 'abc' ) data . node . create ( 'abc' ) data . node . exists ( 'abc' ) or data . node . get ( name = 'abc' ) data . node . create ( name = 'abc' ) data . node . exists ( name = 'abc' ) schema with a multiple keys Note: specify them in the correct order data . node . get ( 'abc' , 1 ) data . node . create ( 'abc' , 1 ) data . node . exists ( 'abc' , 1 ) or data . node . get ( name = 'abc' , id = 1 ) data . node . create ( name = 'abc' , id = 1 ) data . node . exists ( name = 'abc' , id = 1 ) The DataOfChildrenType Attributes are defined in the following table Attribute Description get(*args, **kwargs) Returns an existing child with the specified keys. Generates an AttributeError if a wrong number of keys is given, and KeyError if there is the child does not exist. exists(*args, **kwargs) Returns True if a child with the specified keys exists. Generates an AttributeError if a wrong number of keys is given. create(*args, **kwargs) Creates and returns a child with the specified keys. If this child already exists, the existing child is returned (and no changes are made). Generates an AttributeError if a wrong number of keys is given. count() Counts the number of children. is_empty Returns True if there are no children of this type. items() Iterates over all children of this type and are sorted based on their keys. clear() Removes all children of this type. formatter Returns the Formatter that can be used to generate the show report for the Data object. iter_format(max_width) Invokes the Formatter.iter_format_type() of these Data objects. Returns an iterator over the formatted output lines.","title":"datachildrenoftype"},{"location":"python/datachildrenoftype/#sr-linux-datachildrenoftype-class","text":"","title":"SR-Linux DataChildrenOfType class"},{"location":"python/datachildrenoftype/#introduction","text":"Use this class when you need to access children through a Data object. It allows you to retrieve, create, and iterate all children","title":"Introduction"},{"location":"python/datachildrenoftype/#usage","text":"Class srlinux . data . data . DataChildrenOfType ( schema , parent ) The children of a Data object are returned by Data.get_children() or by accessing the attribute with the child name (for example, Data.interface). Most methods require you to pass a value for each key defined in the schema. schema without keys data . node . get () data . node . create () data . node . exists () schema with a single key data . node . get ( 'abc' ) data . node . create ( 'abc' ) data . node . exists ( 'abc' ) or data . node . get ( name = 'abc' ) data . node . create ( name = 'abc' ) data . node . exists ( name = 'abc' ) schema with a multiple keys Note: specify them in the correct order data . node . get ( 'abc' , 1 ) data . node . create ( 'abc' , 1 ) data . node . exists ( 'abc' , 1 ) or data . node . get ( name = 'abc' , id = 1 ) data . node . create ( name = 'abc' , id = 1 ) data . node . exists ( name = 'abc' , id = 1 ) The DataOfChildrenType Attributes are defined in the following table Attribute Description get(*args, **kwargs) Returns an existing child with the specified keys. Generates an AttributeError if a wrong number of keys is given, and KeyError if there is the child does not exist. exists(*args, **kwargs) Returns True if a child with the specified keys exists. Generates an AttributeError if a wrong number of keys is given. create(*args, **kwargs) Creates and returns a child with the specified keys. If this child already exists, the existing child is returned (and no changes are made). Generates an AttributeError if a wrong number of keys is given. count() Counts the number of children. is_empty Returns True if there are no children of this type. items() Iterates over all children of this type and are sorted based on their keys. clear() Removes all children of this type. formatter Returns the Formatter that can be used to generate the show report for the Data object. iter_format(max_width) Invokes the Formatter.iter_format_type() of these Data objects. Returns an iterator over the formatted output lines.","title":"Usage"},{"location":"python/introduction/","text":"SR-Linux Python Plugin framework # Introduction # SR Linux is an open networking NOS that can be extended in various ways. In this section we focus on the python plugin framework. The python plugin framework allow to extend the CLI with: Show routines Tools commands","title":"Introduction"},{"location":"python/introduction/#sr-linux-python-plugin-framework","text":"","title":"SR-Linux Python Plugin framework"},{"location":"python/introduction/#introduction","text":"SR Linux is an open networking NOS that can be extended in various ways. In this section we focus on the python plugin framework. The python plugin framework allow to extend the CLI with: Show routines Tools commands","title":"Introduction"},{"location":"python/output/","text":"SR-Linux Output plugin # Introduction # The Output Plugin allows you to print output and errors Output Methods # The folowing output methods are defined * output_format(self): * set_output_format(self, output_format): * screen_dimensions(self): * print_data(self, data): * print(self, text): * print_line(self, text=''): * print_error(self, text): * print_error_line(self, text=''): * print_warning(self, text): * print_warning_line(self, text=''): * print_info(self, text): * print_info_line(self, text=''): Example # output.print_error_line(result_string)","title":"output"},{"location":"python/output/#sr-linux-output-plugin","text":"","title":"SR-Linux Output plugin"},{"location":"python/output/#introduction","text":"The Output Plugin allows you to print output and errors","title":"Introduction"},{"location":"python/output/#output-methods","text":"The folowing output methods are defined * output_format(self): * set_output_format(self, output_format): * screen_dimensions(self): * print_data(self, data): * print(self, text): * print_line(self, text=''): * print_error(self, text): * print_error_line(self, text=''): * print_warning(self, text): * print_warning_line(self, text=''): * print_info(self, text): * print_info_line(self, text=''):","title":"Output Methods"},{"location":"python/output/#example","text":"output.print_error_line(result_string)","title":"Example"},{"location":"python/schemanode/","text":"SR-Linux SchemaNode # Introduction # A schemaNode is a base building block that describe a data model. Similar to the output of the tree command or the content of a YANG file, they indicate what lists, containers, keys, fields, and leaf- lists can be created. Show commands use schemaNode as a base building block. Import # To build a SchemaNode, start with a FixedSchemaRoot(). from srlinux.schema.fixed_schema import FixedSchemaRoot Initializing a variable with the FixedSchemaRoot() root = FixedSchemaRoot () Method: add_child # The add_child method allows to add a list/container to the current node, which allows you to specify the keys, fields, and leaf-lists of the new child. Childs can be nested and can use a mix of key, fields and leaf-lists Example # Example of a simple datamodel with field def _get_schema ( self ): root = FixedSchemaRoot () root . add_child ( '<child-name>' , fields = [ '<field1>' , '<field2>' , '<field3>' ]) return root Example of a datamodel with keys def _get_schema ( self ): root = FixedSchemaRoot () root . add_child ( '<child-name>' , keys = [ '<key1>' , '<key2>' ], fields = [ '<field1>' , '<field2>' ]) return root Example of a nested datamodel with keys and fields def _get_schema ( self ): root = FixedSchemaRoot () < var > = root . add_child ( '<child1-name>' , keys = [ '<key1>' , '<key2>' ]) < var >. add_child ( '<child2-name>' , fields = [ '<fielda>' , '<fieldb>' ] ) return root","title":"schemanode"},{"location":"python/schemanode/#sr-linux-schemanode","text":"","title":"SR-Linux SchemaNode"},{"location":"python/schemanode/#introduction","text":"A schemaNode is a base building block that describe a data model. Similar to the output of the tree command or the content of a YANG file, they indicate what lists, containers, keys, fields, and leaf- lists can be created. Show commands use schemaNode as a base building block.","title":"Introduction"},{"location":"python/schemanode/#import","text":"To build a SchemaNode, start with a FixedSchemaRoot(). from srlinux.schema.fixed_schema import FixedSchemaRoot Initializing a variable with the FixedSchemaRoot() root = FixedSchemaRoot ()","title":"Import"},{"location":"python/schemanode/#method-add_child","text":"The add_child method allows to add a list/container to the current node, which allows you to specify the keys, fields, and leaf-lists of the new child. Childs can be nested and can use a mix of key, fields and leaf-lists","title":"Method: add_child"},{"location":"python/schemanode/#example","text":"Example of a simple datamodel with field def _get_schema ( self ): root = FixedSchemaRoot () root . add_child ( '<child-name>' , fields = [ '<field1>' , '<field2>' , '<field3>' ]) return root Example of a datamodel with keys def _get_schema ( self ): root = FixedSchemaRoot () root . add_child ( '<child-name>' , keys = [ '<key1>' , '<key2>' ], fields = [ '<field1>' , '<field2>' ]) return root Example of a nested datamodel with keys and fields def _get_schema ( self ): root = FixedSchemaRoot () < var > = root . add_child ( '<child1-name>' , keys = [ '<key1>' , '<key2>' ]) < var >. add_child ( '<child2-name>' , fields = [ '<fielda>' , '<fieldb>' ] ) return root","title":"Example"},{"location":"python/show/","text":"SR-Linux Show Python Plugin framework # Introduction # SR Linux is an open networking NOS that can be extended in various ways. In this section we focus on the python plugin framework for show commands. Show command Plugin # A show Plugin is implemented by redefining the CliPlugin Class with its own methods. The methods define different aspects on how a show command is consumed, like: The cli commands/arguments used as input The data-model the show commands uses How the show commands format the output to the terminal. To write a CliPlugin the following steps should be followed: Build a schemaNode Upate the CliPlugin and define how to interact with the show command Retrieve the state from the management server Populate the data object Add Formatter instances to determine how the data will be formatted Implement the callback method to pass the Data structure to the output.print_data command Build a schemaNode # Schema nodes describe a data model. Similar to the output of the tree command or the content of a YANG file, they indicate what lists, containers, keys, fields, and leaf- lists can be created. To build a SchemaNode, start with a FixedSchemaRoot() and then add your top-level list/container using FixedSchemaNode.add_child(). def _get_my_schema ( self ): root = FixedSchemaRoot () interface = root . add_child ( 'interface' , key = 'name' , fields = [ 'description' , 'admin-state' ]) child = interface . add_child ( 'child' , key = 'Child-Id' , fields = [ 'Is-Cool' ]) The code above generates a data model for the following YANG model: list interface { key \"name\" ; leaf \"description\" ; leaf \"admin-state\" ; list child { key \"name\" ; leaf \"success\" ; leaf \"failure\" ; } More details on the schemaNode can be found here Upate the CliPlugin and define how to interact with the show command # Once the data model is defined, the next step is to define the arguments/keys that will be used by the show command. This is done through the add_command which defines: - The syntax, which defines the command syntax. Command arguments/values - The callback function that is defining the output, through the next steps. - The schema that references th schemaNode that is defined in the previous step class Plugin ( CliPlugin ): ''' Adds a fancy show report. ''' def load ( self , cli , ** _kwargs ): cli . show_mode . add_command ( Syntax ( 'report' ) . add_unnamed_argument ( 'name' ), update_location = False , callback = self . _print , schema = self . _get_my_schema (), ) More details on the add_command can be found here . More details on the syntax plugin can be found here . Retrieve the state from the management server # To retrieve the state, use build_path() to populate a path of the key you need to retrieve, and call get_data. This returns a Data object pointing to the root of the data returned by the management server: from srlinux.location import build_path def _fetch_state ( self , state , arguments ): path = build_path ( '/interface[name= {name} ]/ subinterface [ index =* ] ', name=arguments.get(' name ')) return state . server_data_store . get_data ( path , recursive = True ) Populate the data # With the data from the management server and a data model, populate the Data object: from srlinux.data import Data from srlinux import strings def _populate_data ( self , server_data ): result = Data ( self . _get_my_schema ()) for interface in server_data . interface . items (): data = result . interface . create ( interface . name ) data . description = interface . description data . admin_state = interface . admin_state self . _add_children ( data , interface . subinterface ) return result def _add_children ( self , data , server_data ): # server_data is an instance of DataChildrenOfType for subinterface in server_data . items (): child = data . child . create ( subinterface . index ) cool_ids = [ 42 , 1337 ] is_cool = subinterface . index in cool_ids child . is_cool = strings . bool_to_yes_no ( is_cool ) Add formatter instances # To format the output, assign Formatter instances to the different Data objects. The type of Formatter determines whether the output is formatted using key: value pairs, as a grid-based table, or using a custom format. from srlinux.data import Border , ColumnFormatter , Data , TagValueFormatter , Borders , Indent def _set_formatters ( self , data ): data . set_formatter ( '/interface' , Border ( TagValueFormatter (), Border . Above | Border . Below | Border . Between , '=' )) data . set_formatter ( '/interface/child' , Indent ( ColumnFormatter ( ancestor_keys = False , borders = Borders . Header ), indenta tion = 2 )) Implement the callback method # The following example shows how to implement the callback method which can then be invoked to complete the routine: def _print ( self , state , arguments , output , ** _kwargs ): server_data = self . _fetch_state ( state , arguments ) result = self . _populate_data ( server_data ) self . _set_formatters ( result ) output . print_data ( result )","title":"CLI Show plugin"},{"location":"python/show/#sr-linux-show-python-plugin-framework","text":"","title":"SR-Linux Show Python Plugin framework"},{"location":"python/show/#introduction","text":"SR Linux is an open networking NOS that can be extended in various ways. In this section we focus on the python plugin framework for show commands.","title":"Introduction"},{"location":"python/show/#show-command-plugin","text":"A show Plugin is implemented by redefining the CliPlugin Class with its own methods. The methods define different aspects on how a show command is consumed, like: The cli commands/arguments used as input The data-model the show commands uses How the show commands format the output to the terminal. To write a CliPlugin the following steps should be followed: Build a schemaNode Upate the CliPlugin and define how to interact with the show command Retrieve the state from the management server Populate the data object Add Formatter instances to determine how the data will be formatted Implement the callback method to pass the Data structure to the output.print_data command","title":"Show command Plugin"},{"location":"python/show/#build-a-schemanode","text":"Schema nodes describe a data model. Similar to the output of the tree command or the content of a YANG file, they indicate what lists, containers, keys, fields, and leaf- lists can be created. To build a SchemaNode, start with a FixedSchemaRoot() and then add your top-level list/container using FixedSchemaNode.add_child(). def _get_my_schema ( self ): root = FixedSchemaRoot () interface = root . add_child ( 'interface' , key = 'name' , fields = [ 'description' , 'admin-state' ]) child = interface . add_child ( 'child' , key = 'Child-Id' , fields = [ 'Is-Cool' ]) The code above generates a data model for the following YANG model: list interface { key \"name\" ; leaf \"description\" ; leaf \"admin-state\" ; list child { key \"name\" ; leaf \"success\" ; leaf \"failure\" ; } More details on the schemaNode can be found here","title":"Build a schemaNode"},{"location":"python/show/#upate-the-cliplugin-and-define-how-to-interact-with-the-show-command","text":"Once the data model is defined, the next step is to define the arguments/keys that will be used by the show command. This is done through the add_command which defines: - The syntax, which defines the command syntax. Command arguments/values - The callback function that is defining the output, through the next steps. - The schema that references th schemaNode that is defined in the previous step class Plugin ( CliPlugin ): ''' Adds a fancy show report. ''' def load ( self , cli , ** _kwargs ): cli . show_mode . add_command ( Syntax ( 'report' ) . add_unnamed_argument ( 'name' ), update_location = False , callback = self . _print , schema = self . _get_my_schema (), ) More details on the add_command can be found here . More details on the syntax plugin can be found here .","title":"Upate the CliPlugin and define how to interact with the show command"},{"location":"python/show/#retrieve-the-state-from-the-management-server","text":"To retrieve the state, use build_path() to populate a path of the key you need to retrieve, and call get_data. This returns a Data object pointing to the root of the data returned by the management server: from srlinux.location import build_path def _fetch_state ( self , state , arguments ): path = build_path ( '/interface[name= {name} ]/ subinterface [ index =* ] ', name=arguments.get(' name ')) return state . server_data_store . get_data ( path , recursive = True )","title":"Retrieve the state from the management server"},{"location":"python/show/#populate-the-data","text":"With the data from the management server and a data model, populate the Data object: from srlinux.data import Data from srlinux import strings def _populate_data ( self , server_data ): result = Data ( self . _get_my_schema ()) for interface in server_data . interface . items (): data = result . interface . create ( interface . name ) data . description = interface . description data . admin_state = interface . admin_state self . _add_children ( data , interface . subinterface ) return result def _add_children ( self , data , server_data ): # server_data is an instance of DataChildrenOfType for subinterface in server_data . items (): child = data . child . create ( subinterface . index ) cool_ids = [ 42 , 1337 ] is_cool = subinterface . index in cool_ids child . is_cool = strings . bool_to_yes_no ( is_cool )","title":"Populate the data"},{"location":"python/show/#add-formatter-instances","text":"To format the output, assign Formatter instances to the different Data objects. The type of Formatter determines whether the output is formatted using key: value pairs, as a grid-based table, or using a custom format. from srlinux.data import Border , ColumnFormatter , Data , TagValueFormatter , Borders , Indent def _set_formatters ( self , data ): data . set_formatter ( '/interface' , Border ( TagValueFormatter (), Border . Above | Border . Below | Border . Between , '=' )) data . set_formatter ( '/interface/child' , Indent ( ColumnFormatter ( ancestor_keys = False , borders = Borders . Header ), indenta tion = 2 ))","title":"Add formatter instances"},{"location":"python/show/#implement-the-callback-method","text":"The following example shows how to implement the callback method which can then be invoked to complete the routine: def _print ( self , state , arguments , output , ** _kwargs ): server_data = self . _fetch_state ( state , arguments ) result = self . _populate_data ( server_data ) self . _set_formatters ( result ) output . print_data ( result )","title":"Implement the callback method"},{"location":"python/syntax/","text":"SR-Linux Syntax plugin # Introduction # The SR-Linux syntax plugin defines the syntax of how the user can execute the command. The syntax is based on a name-tag with arguments with attributes. Argument # A command can have arguments, SR-Linux defines the following argument types named-arguments: an argument with a name-tag and a value unnamed-arguments: an argument with only a value boolean-arguments: an argument with a name-tag, but without a value Attributes # An argument in SR-Linux can be defined with the following attributes: names: The name used as tag for the named-arguments. default [optional]: The default-value used if the argument is not specified in the CLI. min_count [default 1]: The minimum number of values that can be entered. Must be > 1 max_count [default 1]: The maximum number of values that can be entered. Must be > 1 or * for a list count [default 1]: The exact number of values that must be entered. Is equivalent to setting both 'min_count' and 'max_count' to this same value. array_type [default ArgumentArrayType.none]: If ArgumentArrayType.none, then the value is not an array If ArgumentArrayType.leaflist, then '[' and ']' are required before/after the values on the command line. If ArgumentArrayType.leaflist_optional_value_or_brackets, then '[' and ']' are optional before/after the values on the command line, single value is also optional If ArgumentArrayType.leaflist_mandatory_value_or_brackets, then '[' and ']' are optional before/after the values on the command line, but at least single value is is_mandatory choices [optional]: A list of accepted values. An error will be raised if the value is not one of the given choices. suggestions [optional]: Either a list of suggested values, or a callable that returns such a list. No error will be raised if the value is not one of the suggested values. callback: will be invoked with the following arguments: The Argument describing the argument of which we're retrieving the values state: The CliState The CommandNodeWithArguments describing the input node and the current context. value_checker [optional]: A callable that can be used to select which values are accepted help: defines a help description for the argument Examples # Example named + boolean arguments: def _get_syntax ( self ): syntax = ( Syntax ( 'action' , help = 'test action' ) . add_boolean_argument ( 'trigger' , help = 'trigger action' ) . add_named_argument ( 'start' , value_checker = IntegerValueInRangeChecker ( min_value = 1 ), default = '1' , help = 'The starting sequence-id that will be assigned to the first entry' ) . add_named_argument ( 'increment' , value_checker = IntegerValueInRangeChecker ( min_value = 1 ), default = '10' , help = 'The constant sequence-id increment between adjacent entries' )) return syntax Example unamed argument: syntax_pull_request = ( Syntax ( 'pull-request' , help = 'git pull-request creates a pull request based on the commits in github' ) . add_unnamed_argument ( 'prSubject' , help = 'pull request subject fir the pull-request' ) . add_unnamed_argument ( 'prDescription' , help = 'pull request Description for the pull-request' )) pull_request = git . add_command ( syntax_pull_request , update_location = False , callback = git_pullrequest_process )","title":"syntax"},{"location":"python/syntax/#sr-linux-syntax-plugin","text":"","title":"SR-Linux Syntax plugin"},{"location":"python/syntax/#introduction","text":"The SR-Linux syntax plugin defines the syntax of how the user can execute the command. The syntax is based on a name-tag with arguments with attributes.","title":"Introduction"},{"location":"python/syntax/#argument","text":"A command can have arguments, SR-Linux defines the following argument types named-arguments: an argument with a name-tag and a value unnamed-arguments: an argument with only a value boolean-arguments: an argument with a name-tag, but without a value","title":"Argument"},{"location":"python/syntax/#attributes","text":"An argument in SR-Linux can be defined with the following attributes: names: The name used as tag for the named-arguments. default [optional]: The default-value used if the argument is not specified in the CLI. min_count [default 1]: The minimum number of values that can be entered. Must be > 1 max_count [default 1]: The maximum number of values that can be entered. Must be > 1 or * for a list count [default 1]: The exact number of values that must be entered. Is equivalent to setting both 'min_count' and 'max_count' to this same value. array_type [default ArgumentArrayType.none]: If ArgumentArrayType.none, then the value is not an array If ArgumentArrayType.leaflist, then '[' and ']' are required before/after the values on the command line. If ArgumentArrayType.leaflist_optional_value_or_brackets, then '[' and ']' are optional before/after the values on the command line, single value is also optional If ArgumentArrayType.leaflist_mandatory_value_or_brackets, then '[' and ']' are optional before/after the values on the command line, but at least single value is is_mandatory choices [optional]: A list of accepted values. An error will be raised if the value is not one of the given choices. suggestions [optional]: Either a list of suggested values, or a callable that returns such a list. No error will be raised if the value is not one of the suggested values. callback: will be invoked with the following arguments: The Argument describing the argument of which we're retrieving the values state: The CliState The CommandNodeWithArguments describing the input node and the current context. value_checker [optional]: A callable that can be used to select which values are accepted help: defines a help description for the argument","title":"Attributes"},{"location":"python/syntax/#examples","text":"Example named + boolean arguments: def _get_syntax ( self ): syntax = ( Syntax ( 'action' , help = 'test action' ) . add_boolean_argument ( 'trigger' , help = 'trigger action' ) . add_named_argument ( 'start' , value_checker = IntegerValueInRangeChecker ( min_value = 1 ), default = '1' , help = 'The starting sequence-id that will be assigned to the first entry' ) . add_named_argument ( 'increment' , value_checker = IntegerValueInRangeChecker ( min_value = 1 ), default = '10' , help = 'The constant sequence-id increment between adjacent entries' )) return syntax Example unamed argument: syntax_pull_request = ( Syntax ( 'pull-request' , help = 'git pull-request creates a pull request based on the commits in github' ) . add_unnamed_argument ( 'prSubject' , help = 'pull request subject fir the pull-request' ) . add_unnamed_argument ( 'prDescription' , help = 'pull request Description for the pull-request' )) pull_request = git . add_command ( syntax_pull_request , update_location = False , callback = git_pullrequest_process )","title":"Examples"},{"location":"python/tools/","text":"Tools Python Plugin framework # Introduction # SR Linux is an open networking NOS that can be extended in various ways. In this section we focus on the python plugin framework for extending the tools commands. Tools command Plugin # A tools plugin is defined by redefining the ToolsPlugin/CliPlugin Class with its own methods, that define the dependencies, the CLI syntax and its behavior that the plugins uses to extend the system. class inheritance # The plugin inherits the ToolsPlugin class and extends it. class Plugin ( ToolsPlugin ): Dependencies # The following statement defines the dependency on the tools_mode. The get required plugins method returns a list with the dependencies this plugin needs. class Plugin ( ToolsPlugin ): def get_required_plugins ( self ): return [ RequiredPlugin ( 'tools_mode' ) ] Extending CLI hierarchy # The on tools load method provides the ability to extend the cli hierarchy. class Plugin ( ToolsPlugin ): def on_tools_load ( self , state ): In the on tools load you can define the commands with syntax and callback functions that provide logic when executing the command. The command and syntax extensions are explained in more detail here. First, through the state variable, you get access to the current state of the CLI engine. This allows to git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) After, through the add command , you can extend the CLI hierarchy. The add_command also allow to extend the command syntax and optionaly allows to execute a callback function which can provide some logic that the command executes. class Plugin ( ToolsPlugin ): ''' git ''' def get_required_plugins ( self ): return [ RequiredPlugin ( 'tools_mode' ) ] def on_tools_load ( self , state ): syntax_git = Syntax ( 'git' , help = '`Git interaction as a client`' ) git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) syntax_branch = Syntax ( 'branch' , help = 'git branch creates a branch in github' ) branch = git . add_command ( syntax_branch , update_location = False , callback = git_branch_process ) def git_branch_process ( state , output , arguments , ** _kwargs ): action_arg = {} yang_val , result_string = yang_validation ( state ) if yang_val : git_rpc_cal ( 'Server.Branch' , action_arg , output ) else : output . print_error_line ( result_string ) Callback function # In the callback function we can define logic that is used by the plugin to execute various tasks. E.g. in this example we use a yang validation and call a json rpc call to execute a task. def yang_validation ( state ): path = build_path ( '/git-client' ) result = state . server_data_store . get_json ( path , recursive = True , include_field_defaults = True ) result_json_obj = json . loads ( result ) #print(result_json_obj) org_exists = 'organization' in result_json_obj In the yang validation we call the state that is defined in the git-client tree and validate the data. In the git-rpc-call we call a json rpc server to execute a task, and we update the output based on the returned result. def git_rpc_call ( method , action_args , output ): url = \"http://localhost:7777\" s_exists = 'subject' in action_args if s_exists : subject = action_args [ 'subject' ] else : subject = 'dummy' c_exists = 'comment' in action_args if s_exists : comment = action_args [ 'comment' ] else : comment = 'dummy' payload = { \"method\" : method , \"params\" : [{ \"Subject\" : subject , \"Comment\" : comment }], \"jsonrpc\" : \"2.0\" , \"id\" : 0 , } response = requests . post ( url , json = payload ) . json () if response [ \"result\" ] != 'success' : output . print_error_line ( response [ \"result\" ]) assert response [ \"id\" ] == 0","title":"CLI Tools plugin"},{"location":"python/tools/#tools-python-plugin-framework","text":"","title":"Tools Python Plugin framework"},{"location":"python/tools/#introduction","text":"SR Linux is an open networking NOS that can be extended in various ways. In this section we focus on the python plugin framework for extending the tools commands.","title":"Introduction"},{"location":"python/tools/#tools-command-plugin","text":"A tools plugin is defined by redefining the ToolsPlugin/CliPlugin Class with its own methods, that define the dependencies, the CLI syntax and its behavior that the plugins uses to extend the system.","title":"Tools command Plugin"},{"location":"python/tools/#class-inheritance","text":"The plugin inherits the ToolsPlugin class and extends it. class Plugin ( ToolsPlugin ):","title":"class inheritance"},{"location":"python/tools/#dependencies","text":"The following statement defines the dependency on the tools_mode. The get required plugins method returns a list with the dependencies this plugin needs. class Plugin ( ToolsPlugin ): def get_required_plugins ( self ): return [ RequiredPlugin ( 'tools_mode' ) ]","title":"Dependencies"},{"location":"python/tools/#extending-cli-hierarchy","text":"The on tools load method provides the ability to extend the cli hierarchy. class Plugin ( ToolsPlugin ): def on_tools_load ( self , state ): In the on tools load you can define the commands with syntax and callback functions that provide logic when executing the command. The command and syntax extensions are explained in more detail here. First, through the state variable, you get access to the current state of the CLI engine. This allows to git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) After, through the add command , you can extend the CLI hierarchy. The add_command also allow to extend the command syntax and optionaly allows to execute a callback function which can provide some logic that the command executes. class Plugin ( ToolsPlugin ): ''' git ''' def get_required_plugins ( self ): return [ RequiredPlugin ( 'tools_mode' ) ] def on_tools_load ( self , state ): syntax_git = Syntax ( 'git' , help = '`Git interaction as a client`' ) git = state . command_tree . tools_mode . root . add_command ( syntax_git , update_location = False ) syntax_branch = Syntax ( 'branch' , help = 'git branch creates a branch in github' ) branch = git . add_command ( syntax_branch , update_location = False , callback = git_branch_process ) def git_branch_process ( state , output , arguments , ** _kwargs ): action_arg = {} yang_val , result_string = yang_validation ( state ) if yang_val : git_rpc_cal ( 'Server.Branch' , action_arg , output ) else : output . print_error_line ( result_string )","title":"Extending CLI hierarchy"},{"location":"python/tools/#callback-function","text":"In the callback function we can define logic that is used by the plugin to execute various tasks. E.g. in this example we use a yang validation and call a json rpc call to execute a task. def yang_validation ( state ): path = build_path ( '/git-client' ) result = state . server_data_store . get_json ( path , recursive = True , include_field_defaults = True ) result_json_obj = json . loads ( result ) #print(result_json_obj) org_exists = 'organization' in result_json_obj In the yang validation we call the state that is defined in the git-client tree and validate the data. In the git-rpc-call we call a json rpc server to execute a task, and we update the output based on the returned result. def git_rpc_call ( method , action_args , output ): url = \"http://localhost:7777\" s_exists = 'subject' in action_args if s_exists : subject = action_args [ 'subject' ] else : subject = 'dummy' c_exists = 'comment' in action_args if s_exists : comment = action_args [ 'comment' ] else : comment = 'dummy' payload = { \"method\" : method , \"params\" : [{ \"Subject\" : subject , \"Comment\" : comment }], \"jsonrpc\" : \"2.0\" , \"id\" : 0 , } response = requests . post ( url , json = payload ) . json () if response [ \"result\" ] != 'success' : output . print_error_line ( response [ \"result\" ]) assert response [ \"id\" ] == 0","title":"Callback function"}]}